-- MySQL dump 10.13  Distrib 5.1.41, for pc-linux-gnu (i686)
--
-- Host: localhost    Database: guidodb
-- ------------------------------------------------------
-- Server version	5.0.77

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Not dumping tablespaces as no INFORMATION_SCHEMA.FILES table on this server
--

--
-- Table structure for table `Answers`
--

DROP TABLE IF EXISTS `Answers`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Answers` (
  `a_no` int(4) NOT NULL auto_increment,
  `q_no` int(4) NOT NULL,
  `student_id` varchar(20) default NULL,
  `text` text,
  `autograder` text,
  `status` varchar(10), 
  PRIMARY KEY  (`a_no`)
) ENGINE=MyISAM AUTO_INCREMENT=439 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Answers`
--

LOCK TABLES `Answers` WRITE;
/*!40000 ALTER TABLE `Answers` DISABLE KEYS */;
INSERT INTO `Answers` VALUES (0,1,'albert',';; [Problem 11]\n; both-odd? takes in two variable and if both are odd it returns true, if not it is false\n(define both-odd?\n  (lambda (x y)\n    (cond\n      [(not (integer? x)) #f]\n      [(not (integer? y)) #f]\n      [(even? x) #f]\n      [(even? y) #f]\n      [else #t])))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (1,1,'albert',';; [Problem 10]\n; pick-one-at-random takes in two of any variable and returns either one at random\n(define pick-one-at-random\n  (lambda (var1 var2)\n    (if (equal? (random 2) 0)\n        var1\n        var2)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (2,1,'albert',';; [Problem 12]\n; either-even takes in two variables and if either x or y is an even integer if returns true, otherwise it is false.\n(define either-even?\n  (lambda (x y)\n    (cond\n      [(even? x) #t]\n      [(even? y) #t]\n      [else #f])))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (3,1,'albert',';; [Problem 1a]\n; least takes in two numbers x and y and sends back the least of the two\n(define least\n  (lambda (x y)\n    (if (< x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (4,1,'albert',';; [Problem 3]\n; curious? takes a given number x and if x is \"curious\" it\'ll send a #t or a #f if it is not.\n(define curious?\n  (lambda (x)\n    (if (and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1)))\n        #t\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (5,2,'albert',';; [Problem 2]\n; next-even takes a number x and sends back the next even above that number.\n(define next-even\n  (lambda (x)\n    (if (odd? x)\n        (+ x 1)\n        (+ x 2))))\n\n\n; (from a2.ss) decides whether or not a given number x is a perfect square\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (6,2,'albert',';; [Problem 5]\n; opposite takes in two string options, good or evil, and returns the string not used\n(define opposite\n  (lambda (strg)\n    (cond\n      [(equal? strg \"evil\") \"good\"]\n      [else \"evil\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (7,2,'albert',';; [Problem 4]\n; sleep-in? takes in a day of the week and returns whether or not you can sleep in that day\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (8,2,'albert',';; [Problem 7]\n; next-collatz takes in a number x and returns the next number in a collatz sequence\n(define next-collatz\n  (lambda (x)\n    (if (odd? x)\n        (+ (* 3 x) 1)\n        (/ x 2))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (9,2,'albert',';; [Problem 6]\n; next-compass takes in one of the four main cardinal directions and returns the next direction going clockwise\n(define next-compass\n  (lambda (compass)\n    (cond\n      [(equal? compass \'north) \'east]\n      [(equal? compass \'east) \'south]\n      [(equal? compass \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (10,3,'albert',';; [Problem 9]\n; up-or-down takes in a number x and returns x - 1 or x + 1\n(define up-or-down\n  (lambda (x)\n    (if (equal? (random 2) 0)\n        (- x 1)\n        (+ x 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (11,3,'albert',';; [Problem 1b]\n; least-of-three takes in three numbers x, y, and z and sends back the least of the three\n(define least-of-three\n  (lambda (x y z)\n    (least z (least x y))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (12,3,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (13,3,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (14,3,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (15,4,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (16,4,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (17,4,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (18,4,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (19,4,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (20,5,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (21,5,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (22,5,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (23,5,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (24,5,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (25,6,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (26,6,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (27,6,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (28,6,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (29,6,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (30,12,'albert',';; [Problem 11]\n; both-odd? takes in two variable and if both are odd it returns true, if not it is false\n(define both-odd?\n  (lambda (x y)\n    (cond\n      [(not (integer? x)) #f]\n      [(not (integer? y)) #f]\n      [(even? x) #f]\n      [(even? y) #f]\n      [else #t])))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (31,11,'albert',';; [Problem 10]\n; pick-one-at-random takes in two of any variable and returns either one at random\n(define pick-one-at-random\n  (lambda (var1 var2)\n    (if (equal? (random 2) 0)\n        var1\n        var2)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (32,13,'albert',';; [Problem 12]\n; either-even takes in two variables and if either x or y is an even integer if returns true, otherwise it is false.\n(define either-even?\n  (lambda (x y)\n    (cond\n      [(even? x) #t]\n      [(even? y) #t]\n      [else #f])))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (33,1,'albert',';; [Problem 1a]\n; least takes in two numbers x and y and sends back the least of the two\n(define least\n  (lambda (x y)\n    (if (< x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (34,4,'albert',';; [Problem 3]\n; curious? takes a given number x and if x is \"curious\" it\'ll send a #t or a #f if it is not.\n(define curious?\n  (lambda (x)\n    (if (and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1)))\n        #t\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (35,3,'albert',';; [Problem 2]\n; next-even takes a number x and sends back the next even above that number.\n(define next-even\n  (lambda (x)\n    (if (odd? x)\n        (+ x 1)\n        (+ x 2))))\n\n\n; (from a2.ss) decides whether or not a given number x is a perfect square\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (36,6,'albert',';; [Problem 5]\n; opposite takes in two string options, good or evil, and returns the string not used\n(define opposite\n  (lambda (strg)\n    (cond\n      [(equal? strg \"evil\") \"good\"]\n      [else \"evil\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (37,5,'albert',';; [Problem 4]\n; sleep-in? takes in a day of the week and returns whether or not you can sleep in that day\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (38,8,'albert',';; [Problem 7]\n; next-collatz takes in a number x and returns the next number in a collatz sequence\n(define next-collatz\n  (lambda (x)\n    (if (odd? x)\n        (+ (* 3 x) 1)\n        (/ x 2))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (39,7,'albert',';; [Problem 6]\n; next-compass takes in one of the four main cardinal directions and returns the next direction going clockwise\n(define next-compass\n  (lambda (compass)\n    (cond\n      [(equal? compass \'north) \'east]\n      [(equal? compass \'east) \'south]\n      [(equal? compass \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (40,10,'albert',';; [Problem 9]\n; up-or-down takes in a number x and returns x - 1 or x + 1\n(define up-or-down\n  (lambda (x)\n    (if (equal? (random 2) 0)\n        (- x 1)\n        (+ x 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (41,2,'albert',';; [Problem 1b]\n; least-of-three takes in three numbers x, y, and z and sends back the least of the three\n(define least-of-three\n  (lambda (x y z)\n    (least z (least x y))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (42,9,'albert',';; [Problem 8]\n; dna-complement takes in one of four letters representing nucleotides and returns the letter complementary to it\n; and returns \'error if a variable you input does not match\n(define dna-complement\n  (lambda (ntide)\n    (cond\n      [(equal? ntide \'a) \'t]\n      [(equal? ntide \'t) \'a]\n      [(equal? ntide \'g) \'c]\n      [(equal? ntide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (43,12,'boris',';; [Problem 11]\n; both-odd takes two arguments and returns #t if thery are both\n; odd integers\n(define both-odd?\n  (lambda (arg1 arg2)\n    (if (integer? arg1)\n        (if (integer? arg2)\n            (= 2 (+ (remainder arg1 2) (remainder arg2 2)))                                     \n            #f)\n    #f)))\n\n          \n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (44,11,'boris',';; [Problem 10]\n; pick-one-at-random takes two arguments and returns one of the at\n; random with equal probability\n(define pick-one-at-random\n  (lambda (arg1 arg2)\n    (if (= 1 (random 2))\n          arg2\n            arg1)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (45,13,'boris',';; [Problem 12]\n; either-even? takes two arguments and returns #t if one or the other\n; or possibly both are even integers\n(define either-even?\n  (lambda (arg1 arg2)\n        (if (integer? arg1)\n            (if (even? arg1)\n                #t\n                (if (even? arg2)\n                    #t\n                    #f))\n        (if (integer? arg2)\n            (if (even? arg2)\n                    #t    \n                    #f)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (46,1,'boris',';; [Problem 1a]\n; least takes two numbers and returns the smaller of the two\n(define least\n  (lambda (x y)\n    (cond\n      [(< x y) x]\n      [else y])))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (47,4,'boris',';; [Problem 3]\n; curious takes a non-negative integer x and returns #t if adding 1 to \n; 1/2x results in a perfect square\n(define curious?\n  (lambda (x)\n    (integer? (sqrt(+ 1(/ x 2))))))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (48,3,'boris',';; [Problem 2]\n; next-even takes an integer and returns the the smallest even\n; integer greater than n\n(define next-even\n  (lambda (n)\n    (cond\n      [(odd? n) (+ 1 n)]\n      [else (+ 2 n)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (49,6,'boris',';; [Problem 5]\n; opposite takes either the string good or the string evil\n; and returns the opposite\n(define opposite\n  (lambda (behavior)\n    (if (equal? behavior \"good\")\n        \"evil\"\n        \"good\")))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (50,5,'boris',';; [Problem 4]\n; sleep-in? takes a day of the week and lets the user know if it is\n; ok to sleep in by returning a #t on either saturday or sunday and #f otherwise\n(define sleep-in?\n  (lambda (day)\n    (or (equal? day \'saturday) (equal? day \'sunday))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (51,8,'boris',';; [Problem 7]\n; next-collatz takes a positive integer and returns the next number\n; in the Collatz sequence\n(define next-collatz\n  (lambda (n)\n    (cond\n      [(zero? (remainder n 2)) (/ n 2)]\n      [else (+ 1 (* n 3))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (52,7,'boris',';; [Problem 6]\n; next compass takes one of the four standard compass directions\n; and returns the direction that is 90 degrees away in a clockwise direction\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [ else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (53,10,'boris',';; [Problem 9]\n; up-or-down takes an integer (n) and returns either the next integer\n; or the previous integer at random and with equal probability\n(define up-or-down\n  (lambda (n)\n    (cond\n      [(= 1 (random 2)) (- n 1)]\n      [else(+ n 1)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (54,2,'boris',';; [Problem 1b]\n; least-of-three takes three numbers and returns the smallest\n; least in 1a will be used to define the procedure\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) (least y z))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (55,9,'boris',';; [Problem 8]\n; dna-complement takes a symbol representing one of the four dna nucleotides\n; and returns the nucleotide of the pair strand.  If the fiven symbol is \n; not one of the four nucleotides the symbol error will be returned\n(define dna-complement\n  (lambda (nucleotide)\n    (cond\n      [(equal? nucleotide \'a) \'t]\n      [(equal? nucleotide \'t) \'a]\n      [(equal? nucleotide \'g) \'c]\n      [(equal? nucleotide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (56,12,'cathy',';; [Problem 11]\n;i am going to define pick one at random to return one of two arguments at \n;random with equal probability\n(define pick-one-at-random\n  (lambda (x y)\n    (if (equal? (random 2) 1)\n        x\n        y)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (57,11,'cathy',';; [Problem 10]\n;i am going to define up or down to take an integer and return either\n;the integer next integer or the previous integer with equal probability\n(define up-or-down\n  (lambda (x)\n    (if (= (random 2) 1)\n         (+ x 1)\n         (- x 1))))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (58,13,'cathy',';; [Problem 12]\n;i am defining both odd to  return true if both numbers are odd integers\n(define both-odd?\n  (lambda (x y)\n    (if (integer? x) \n        (if (odd? x)\n            (if (integer? y)\n                (if (odd? y)\n                    #t\n                    #f)\n                #f)\n            #f)\n        #f)))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (59,4,'cathy',';; [Problem 3]\n;i am going to define next even so that it takes an integer and returns the\n;next smallest integer greater than the other\n(define next-even\n  (lambda (n)\n    (if (even? n)\n        (+ n 2)\n        (+ n 1))))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (60,3,'cathy',';; [Problem 2]\n;i am going to define least of three using the procedure least so that it\n;returns the smallest number of three numbers\n(define least-of-three\n  (lambda (x y z)\n   (least (least x y) z)))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (61,6,'cathy',';; [Problem 5]\n;i am going to define sleep in as true if the day is saturday or sunday\n(define sleep-in?\n  (lambda (day)\n    (if (or (symbol=? day \'saturday)\n              (symbol=? day \'sunday))\n        #t\n        #f)))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (62,5,'cathy',';; [Problem 4]\n;i am going to use the procedure perfect square to define curious, if add 1 \n;then the result is a perfect square\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n(define curious?\n  (lambda (x)\n    (if (perfect-square? (+ x 1))\n        #t\n        #f)))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (63,8,'cathy',';; [Problem 7]\n;i am going to define next compass so it returns a direction 90 degrees\n;away from the direction\n(define next-compass\n  (lambda (x)\n    (cond\n      [(symbol=? x \'north)\n        \'east]\n      [(symbol=? x \'east)\n        \'south]\n      [(symbol=? x \'west)\n        \'north]\n      [else \' west])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (64,7,'cathy',';; [Problem 6]\n;i am going to define opposite so that when i type in evil it returns \n;good and when i type in good it returns evil\n(define opposite\n  (lambda (x)\n    (if (string=? \"good\" x)\n        \"evil\"\n        \"good\")))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (65,10,'cathy',';; [Problem 9]\n;i am going to define dna complement to return T when typed A and A\n;when typed T and return C when typed G and G when typed C and for \n;every other symbol it will return error \n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? \'a dna) \'t]\n      [(equal? \'t dna) \'a]\n      [(equal? \'g dna) \'c]\n      [(equal? \'c dna) \'g]\n      [else \'error])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (66,9,'cathy',';; [Problem 8]\n;i am going to define next collatz so that if the integer is even it will\n; divide the integer by two and if off it will multiply the integer by 3 \n;and then add 1\n(define next-collatz\n  (lambda (n)\n    (if (even? n)\n        (/ n 2)\n        (+ (* 3 n) 1))))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (67,12,'daniel',';; [Problem 11]\n#|11)\nwe give 2 digits,x and y.first we check x for all cases, and if it works for x, we \ncheck it for y|#\n(define both-odd? \n  (lambda (x y)\n    (cond\n      [(boolean? x) #f]\n      [(procedure? x) #f]\n      [(not(integer? x)) #f]\n      [(not(integer? y)) #f]\n      [(symbol? x) #f]\n      [(symbol? y) #f]\n      [(equal? #f (odd? x)) #f]\n      [(equal? #t (odd? y)) #t]\n      [else #f])))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (68,11,'daniel',';; [Problem 10]\n#|10)when we have 2 digits, probability that we will pick up one is 1/2,so we generate\nsuch random that gives us 2 cases,0 or 1. if we have one we will pick up x, else y|#\n(define pick-one-at-random\n  (lambda (x y)\n    (cond\n      [(= 1 (random 2))x ]\n      [else y])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (69,13,'daniel',';; [Problem 12]\n#|12)in this case, we have to look for both cases\nwe take 2 values called x and y.first we check if x is integer,if it is we \ncreate condition if y not integer we give #f else check result for y.\nafter we check for symbol,if its true we check for y,after we check if x is even\nif yes it gives true, and it works in the same way |#\n(define either-even?\n  (lambda(x y)\n    (cond\n      [(not(integer? x))(if (not (integer? y)) #f (even? y)) ]\n      [(symbol? x) (even? y)]\n      [(equal? #t (even? x)) #t]\n      [(not(integer? y)) #f]\n      [(symbol? y) #f]\n      [(equal? #t (even? y)) #t]\n      [(boolean? x) (even? y)]\n      [(boolean? y) #f]\n      [(procedure? x)(even? y)]\n      [(procedure? y) #f]\n      [else #f])))\n      \n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (70,1,'daniel',';; [Problem 1a]\n;1)\n#|a)we give two numbers and compare them by if|#\n(define least\n  (lambda (x y)\n    (if (< x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (71,4,'daniel',';; [Problem 3]\n#|3)we use previously created procedure \"perfect-square?\"\nwe use p-s? procedure and compare if x+1 and (x/2)+1 cases work together, if they do,\nit gives us true, otherwise false|#\n(define perfect-square?\n  (lambda (x)\n    (if (= (* (round(sqrt x)) (round( sqrt x))) x)\n    #t\n    #f)))\n(define curious?\n  (lambda (x)\n    (cond\n      [(and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1))) #t ]\n      [else #f])))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (72,3,'daniel',';; [Problem 2]\n#|2)\nwe given built-in predicates even? and odd?, and we use cond to know whether\nx is odd or even, if its even we add 2, if its odd we add 1|#\n(define next-even\n  (lambda (x)\n    (cond\n      [(even? x) (+ 2 x)]\n      [else (+ 1 x)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (73,6,'daniel',';; [Problem 5]\n#|5)we give some string \"good\" or \"evil\" and we compare with equal? what we give and \n \"good\", if its equal, we have output \"evil\", \"good\" otherwise|#\n(define opposite\n  (lambda (opp)\n    (cond\n      [(equal? opp \"good\") \"evil\"]\n      [else \"good\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (74,5,'daniel',';; [Problem 4]\n#|4)we make condition where if we encounter two symbols called sunday and saturday we \nreturn true, otherwise false|#\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(or (equal? day \'sunday) (equal? day \'saturday)) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (75,8,'daniel',';; [Problem 7]\n#|7)in condition loop if we have x as even we give result as x divided by 2\notherwise we multiply by 3 and +1.|#\n(define next-collatz\n  (lambda (x)\n    (cond \n      [(even? x)(/ x 2)]\n      [else (+ 1 (* 3 x))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (76,7,'daniel',';; [Problem 6]\n#|6) \nwe give some symbols and compare it with condition.if we give input north we will have\noutput east,if east ->south, if south->west, and else north|#\n(define next-compass \n  (lambda (dir) \n    (cond\n      [(equal? dir \'north) \'east]\n      [(equal? dir \'east) \'south]\n      [(equal? dir \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (77,10,'daniel',';; [Problem 9]\n#|9)we create random generator that gives 2 numbers, 0 or 1.\nwe compare this number to 1, if it matces we substract 1 ,else add 1|#\n(define up-or-down\n  (lambda (a)\n    (cond\n      [(= 1 (random 2)) (+ 1 a)]\n      [else (- a 1)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (78,2,'daniel',';; [Problem 1b]\n#|b)by using procedure least we compare first w digits and compare result \nwith the last digit|#\n(define least-of-three\n  (lambda (a b c)\n    (least c(least a b))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (79,9,'daniel',';; [Problem 8]\n#|8)we take one symbol and compare with what we have, if its equals we give what we have\nelse it comes error|#\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? dna \'a) \'t]\n      [(equal? dna \'t) \'a]\n      [(equal? dna \'g) \'c]\n      [(equal? dna \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (80,12,'ellen',';; [Problem 11]\n; problem 11\n; predicate both-odd? takes two arguments and returns #t if and only if they are both\n; odd integers\n(define both-odd?\n  (lambda (a1 a2)\n    (cond\n      [(not (integer? a1)) #f]\n      [(not (integer? a2)) #f]\n      [(even? a1) #f]\n      [(even? a2) #f]\n      [else #t])))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (81,11,'ellen',';; [Problem 10]\n; problem 10\n; procedure pick-one-at-random takes two arguments and returns one of them, selected\n; at random with equal probability\n(define pick-one-at-random\n  (lambda (a1 a2)\n    (cond\n      [(= (random 2) 0) a1]\n      [else a2])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (82,13,'ellen',';; [Problem 12]\n; problem 12\n; predicate either-even? takes two arguments and returns #t if and only if one or \n; the other (or possibly both) are even integers\n(define either-even?\n  (lambda (a1 a2)\n    (if (integer? a1)\n        (if (even? a1)\n            #t\n            (if (integer? a2)\n                (even? a2)\n                #f))\n        (if (integer? a2)\n            (even? a2)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (83,1,'ellen',';; [Problem 1a]\n; problem 1a\n; procedure least takes two numbers and returns the smaller of the two\n(define least\n  (lambda (x y)\n    (cond\n      [(< x y) x]\n      [else y])))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (84,4,'ellen',';; [Problem 3]\n; probelm 3\n; predicate curious? takes a non-negative integer x and returs #t if\n; x is curious, and #f otherwise\n(define curious?\n  (lambda (x)\n    (cond\n      [(and (integer? (sqrt (+ x 1))) (integer? (sqrt (+ (/ x 2) 1)))) #t]\n      [else #f])))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (85,3,'ellen',';; [Problem 2]\n; problem 2\n; procedure next-even takes an integer x and returns the smallest even\n; integer greater than x\n(define next-even\n  (lambda (x)\n    (cond\n      [(even? x) (+ x 2)]\n      [else (+ x 1)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (86,6,'ellen',';; [Problem 5]\n; problem 5\n; procedure opposite takes either the string good or the string evil and\n; returns the opposite string\n(define opposite\n  (lambda (behavior)\n    (cond\n      [(equal? behavior \"good\") \"evil\"]\n      [else \"good\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (87,5,'ellen',';; [Problem 4]\n; problem 4\n; predicate sleep-in? takes a symbol representing a day of the week \n; and returns #t if the given day is either saturday or sunday, and\n; #f otherwise.\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (88,8,'ellen',';; [Problem 7]\n; problem 7\n; procedure next-collatz takes a number in the collatz sequence and returns the\n; next number in the sequence\n(define next-collatz\n  (lambda (x)\n    (cond\n      [(even? x) (/ x 2)]\n      [else (+ (* x 3) 1)])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (89,7,'ellen',';; [Problem 6]\n; problem 6\n; procedure next-compass takes a symbol representing one of the four standard \n; compass directions and returns the direction that is 90 degrees away in a \n; clockwise direction\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (90,10,'ellen',';; [Problem 9]\n; problem 9\n; procedure up-or-down takes an integer n and returns either the next integer \n; or the previous integer, selected at random with equal probability\n(define up-or-down\n  (lambda (n)\n    (cond\n      [(= (random 2) 0) (+ n 1)]\n      [else (- n 1)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (91,2,'ellen',';; [Problem 1b]\n; problem 1b\n; procedure least-of-three takes three numbers and treturns the smallest\n(define least-of-three\n  (lambda (x y z)\n    (cond\n      [(and (<= x y) (<= x z)) x]\n      [(and (< y x) (< y z)) y]\n      [else z])))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (92,9,'ellen',';; [Problem 8]\n; problem 8\n; procedure dna-complement takes a symbol representing one of the four nucleotides \n; and returns the nucleotide that appears opposite to it on the second strand\n(define dna-complement\n  (lambda (nucleotide)\n    (cond\n      [(equal? nucleotide \'a) \'t]\n      [(equal? nucleotide \'t) \'a]\n      [(equal? nucleotide \'g) \'c]\n      [(equal? nucleotide \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (93,12,'francis',';; [Problem 11]\n;Problem 11\n;put two odd integer into both-odd? should give back #t but anything else gives back #f\n(define both-odd?\n  (lambda (first second)\n    (if (integer? first)\n        (if (odd? first)\n            (if (integer? second)\n                (odd? second)\n                #f)\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (94,11,'francis',';; [Problem 10]\n;Problem 10\n;to inputs are entered into pick-one-at-random and one is picked\n(define pick-one-at-random\n  (lambda (first second)\n    (if (even? (random 2))\n        first\n        second)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (95,13,'francis',';; [Problem 12]\n;Problem 12\n;enter two integers into either-even? and if one or both are you get #t and if not #f\n(define either-even?\n  (lambda (first second)\n    (if (integer? first)\n        (if (even? first)\n            #t\n            (if (integer? second)\n                (even? second)\n                #f))\n        (if (integer? second)\n            (even? second)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (96,1,'francis',';; [Problem 1a]\n;Problem 1\n;a.Taking two number and comparing them to see which one is the least of the two\n(define least\n  (lambda (first second)\n    (cond\n      [(> first second) second]\n      [else first])))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (97,4,'francis',';; [Problem 3]\n;Problem 3\n;helper program\n(define perfect-square?\n  (lambda (x)\n    (if (integer? (sqrt x))\n        #t\n        #f)))\n\n;Trying to figure out if the number plus one and half of the number plus one is a perfect square\n(define curious?\n  (lambda (x)\n    (if (perfect-square? (+ x 1))\n        (if (perfect-square? (+ (/ x 2) 1))\n            #t\n            #f)\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (98,3,'francis',';; [Problem 2]\n;Problem 2\n;finding the next even number that comes up to the given number n\n(define next-even\n  (lambda (n)\n    (if (even? n)\n        (+ n 2)\n        (+ n 1))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (99,6,'francis',';; [Problem 5]\n;Problem 5\n;Gives the oppiste of good or evil\n(define opposite\n  (lambda (alignment)\n    (if (equal? \"good\" alignment)\n        \"evil\"\n        \"good\")))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (100,5,'francis',';; [Problem 4]\n;Problem 4\n;Take a day and plug it into sleep-in? and see if you can sleep in\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? \'saturday day) #t]\n      [(equal? \'sunday day) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (101,8,'francis',';; [Problem 7]\n;Problem 7\n;Colatz sequence takes a positive integer and gives the next number in the sequence\n(define next-collatz\n  (lambda (n)\n    (if (even? n)\n        (/ n 2)\n        (+ (* 3 n) 1))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (102,7,'francis',';; [Problem 6]\n;Problem 6\n;Takes a direction input it into next-compass and it gives the next direction going 90 degrees\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? \'north direction) \'east]\n      [(equal? \'east direction) \'south]\n      [(equal? \'south direction) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (103,10,'francis',';; [Problem 9]\n;Problem 9\n;Plug in integer n into up-or-down and it will give you the previous or the next integer\n(define up-or-down\n  (lambda (n)\n    (if (even? (random 2))\n        (+ n 1)\n        (- n 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (104,2,'francis',';; [Problem 1b]\n;b.Comparing 3 numbers and finding the least, but only using prevous program\n(define least-of-three\n  (lambda (first second third)\n    (least (least first second) third)))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (105,9,'francis',';; [Problem 8]\n;Problem 8\n;Gives opposite dna for ever a, t, g, or c is given\n(define dna-complement\n  (lambda (strand)\n    (cond\n      [(equal? \'a strand) \'t]\n      [(equal? \'t strand) \'a]\n      [(equal? \'g strand) \'c]\n      [(equal? \'c strand) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (106,12,'garry',';; [Problem 11]\n; question 11\n; predicate both-odd? that takes two arguments\n; and returns #t if and only if they are both odd integers\n(define both-odd?\n  (lambda (a b)\n    (if (integer? a)\n        (if (integer? b)\n            (if (odd? a)\n                (if (odd? b)\n                    #t\n                    #f)\n                #f)\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (107,11,'garry',';; [Problem 10]\n; question 10\n; procedure pick-one-at-random that takes two arguments\n; and returns one of them \n; selected at random with equal probability\n(define pick-one-at-random\n  (lambda (a b)\n    (if (= (random 2) 1)\n        a\n        b)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (108,13,'garry',';; [Problem 12]\n; question 12\n; predicate either-even? that takes two arguments\n; and returns #t if and only if one or the other (or possibly both) \n; are even integers\n(define either-even?\n  (lambda (a b)\n    (if (integer? a)\n        (if (even? a)\n            #t\n            #f)\n        (if (integer? b)\n            (if (even? b)\n                #t\n                #f)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (109,1,'garry',';; [Problem 1a]\n; question 1\n; procedure least that takes two numbers and returns the smaller of the two\n(define least\n  (lambda (x y)\n    (cond\n      [(> x y) y]\n      [(<= x y) x]\n      [else \'error])))\n; procedure least-of-three that takes three numbers and returns the smallest\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (110,4,'garry',';; [Problem 3]\n; question 4\n; predicate sleep-in? that takes a symbol representing a day of the week\n; and returns #t if the given day is either saturday or sunday, \n; and #f otherwise\n(define sleep-in?\n  (lambda (day)\n    (if (equal? day \'saturday)\n        #t\n        (if (equal? day \'sunday)\n            #t\n            #f))))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (111,3,'garry',';; [Problem 2]\n; question 3\n; predicate curious? that takes a non-negative integer x\n; and returns #t if x is curious, and #f otherwise\n (define curious?\n    (lambda (x)\n      (integer? (and (sqrt (+ x 1)) (sqrt (+ (/ x 2) 1))))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (112,6,'garry',';; [Problem 5]\n; question 5\n; procedure opposite that takes either the string good \n; or the string evil and returns the opposite string\n(define opposite\n  (lambda (x)\n    (cond\n      [(equal? x \"good\") \"evil\"]\n      [(equal? x \"evil\") \"good\"]\n      [else \'error])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (113,9,'garry',';; [Problem 8]\n; question 8\n; procedure dna-complement that takes a symbol representing one of the four nucleotides \n; and returns the nucleotide that appears opposite it on the second strand. \n; If the given symbol is not one of the four nucleotides, \n; then return the symbol error.\n(define dna-complement\n  (lambda (dna)\n    (if (equal? dna \'a)\n        \'t\n        (if (equal? dna \'t)\n            \'a\n            (if (equal? dna \'g)\n                \'c\n                (if (equal? dna \'c)\n                    \'g\n                    \'error))))))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (114,8,'garry',';; [Problem 7]\n; question 7\n; procedure next-collatz that takes a number in the Collatz sequence \n; and returns the next number in the sequence.\n(define next-collatz\n  (lambda (x)\n    (if (even? x)\n        (* x (/ 1 2))\n        (+ (* x 3) 1))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (115,7,'garry',';; [Problem 6]\n; question 6\n(define next-compass\n  (lambda (compass)\n    (if (equal? compass \'north)\n        \'east\n        (if (equal? compass \' east)\n            \'south\n            (if (equal? compass \'south)\n                \'west\n                (if (equal? compass \'west)\n                    \'north\n                    \'error))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (116,10,'garry',';; [Problem 9]\n; question 9\n; procedure up-or-down that takes an integer n \n; and returns either the next integer or the previous integer\n; selected at random with equal probability\n(define up-or-down\n  (lambda (n)\n    (if (= (random 2) 1)\n        (+ n 1)\n        (- n 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (117,2,'garry',';; [Problem 1b]\n; question 2\n; procedure next-even that takes an integer n \n; and returns the smallest even integer greater than n\n(define next-even\n  (lambda (x)\n    (if (even? x)\n      (+ x 2)\n      (+ x 1))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (118,12,'heidi',';; [Problem 11]\n;11.  both-odd? takes x and y and returns #t if and only if they are both odd integers.\n(define both-odd?\n  (lambda (x y)\n    (if (integer? x)\n        (if (odd? x)\n            (if (integer? y)\n                (if (odd? y)\n                    #t\n                    #f)\n                #f)\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (119,11,'heidi',';; [Problem 10]\n;10.  pick-one-at-random takes two arguments and returns one at random.\n(define pick-one-at-random\n  (lambda (x y)\n    (if (= (random 2) 0)\n        x\n        y)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (120,13,'heidi',';; [Problem 12]\n;12.  either-even? takes x and y and returns #t if and only if one or the other are even integers.\n(define either-even?\n  (lambda (x y)\n    (if (integer? x)\n        (if (even? x)\n            #t\n            (if (integer? y)\n                (if (even? y)\n                    #t\n                    #f)\n                #f))\n        (if (integer? x)\n            (if (even? x)\n                #t\n                #f)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (121,4,'heidi',';; [Problem 3]\n;3.  This procedure tells you if an integer is curious.\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n(define curious?\n  (lambda (x)\n    (if (perfect-square? (+ x 1))\n        (if (perfect-square? (+ 1 (/ x 2)))\n            #t\n            #f)\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (122,3,'heidi',';; [Problem 2]\n;2.  This procedure takes an integer and gives you the next smallest integer greater.\n(define next-even\n  (lambda (n)\n    (if (even? n)\n        (+ n 2)\n        (+ n 1))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (123,6,'heidi',';; [Problem 5]\n;5.  This procedure gives you the opposite of good or evil.\n(define opposite\n  (lambda (x)\n    (if (equal? x \"good\")\n        \"evil\"\n        \"good\")))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (124,5,'heidi',';; [Problem 4]\n;4.  This procedure tells you if it is saturday or sunday.\n(define sleep-in?\n  (lambda (x)\n    (cond\n      [(equal? x \'saturday) #t]\n      [(equal? x \'sunday) #t]\n      [else \'#f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (125,8,'heidi',';; [Problem 7]\n;7.  This procedure takes a number in the Collatz sequence and returns the next number.\n(define next-collatz\n  (lambda (x)\n    (if (even? x)\n        (/ x 2)\n        (+ (* x 3) 1))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (126,7,'heidi',';; [Problem 6]\n;6.  This procedure gives you the direction 90 degrees clockwise opposite of a given direction.\n(define next-compass\n  (lambda (x)\n    (cond\n      [(equal? x \'north) \'east]\n      [(equal? x \'east) \'south]\n      [(equal? x \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (127,10,'heidi',';; [Problem 9]\n;9.  This procedure gives you either the next or previous integer at random.\n(define up-or-down\n  (lambda (x)\n    (if (= (random 2) 0)\n      (- x 1)\n      (+ x 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (128,9,'heidi',';; [Problem 8]\n;8.  This procedure gives you the opposite strand of a DNA.\n(define dna-complement\n  (lambda (letter)\n    (cond\n      [(equal? letter \'a) \'t]\n      [(equal? letter \'t) \'a]\n      [(equal? letter \'g) \'c]\n      [(equal? letter \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (129,12,'imre',';; [Problem 11]\n;; Problem 11\n(define both-odd?\n  (lambda (a b)\n    (if (integer? a)\n        (if (odd? a)        \n            (if (integer? b)\n                (if (odd? b)\n                    #t\n                    #f)\n                #f)\n            #f)\n        #f)))\n; both-odd? takes variables a and b and evaluates whether it is odd or not     \n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (130,11,'imre',';; [Problem 10]\n;; Problem 10\n(define pick-one-at-random\n  (lambda (a b)\n    (if (equal? (random 2) 0)\n        a\n        b)))\n; pick-one-at-random takes variables a and b and returns random integer a or b\n        \n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (131,13,'imre',';; [Problem 12]\n;; Problem 12\n(define either-even?\n  (lambda (x y)\n    (if (integer? x)\n        (if (even? x)\n            #t\n            (if (integer? y)\n                (if (even? y)\n                    #t\n                    #f)\n                #f))\n        (if (integer? y)\n            (if (even? y)\n                #t\n                #f)\n            #f))))\n; either-even? takes variables x and y and evaluates whether at least one of variables is even or not\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (132,1,'imre',';; [Problem 1a]\n;; Problem 1a\n(define least\n  (lambda (x y)\n    (cond\n      [(> x y) y]\n      [else x])))\n; least takes variables x and y and returns the smaller value between two\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (133,4,'imre',';; [Problem 3]\n;; Problem 3\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n(define curious?\n  (lambda (x)\n    (if (perfect-square? (+ x 1))\n          (if (perfect-square? (+ (/ x 2) 1))\n              #t\n              #f)\n          #f)))\n; curious? takes a variable x and evaluates whether it satisfys both conditions curious? function.\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (134,3,'imre',';; [Problem 2]\n;; Problem 2\n(define next-even\n  (lambda (n)\n    (cond\n      [(even? n) (+ n 2)]\n      [else (+ n 1)])))\n; next-even takes a variable n and returns a even number by adding 1 or 2\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (135,6,'imre',';; [Problem 5]\n;; Problem 5\n(define opposite\n  (lambda (string)\n    (cond\n      [(equal? \"good\" string) \"evil\"]\n      [else \"good\"])))\n; opposite takes a variable string and it gives an opposite result of string\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (136,5,'imre',';; [Problem 4]\n;; Problem 4\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? \'monday day) #f]\n      [(equal? \'tuesday day) #f]\n      [(equal? \'wednesday day) #f]\n      [(equal? \'thursday day) #f]\n      [(equal? \'friday day) #f]\n      [(equal? \'saturday day) #t]\n      [(equal? \'sunday day) #t]\n      [else \'error])))\n; sleep-in? takes a variable day and it only gives #t when it is saturday and sunday\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (137,8,'imre',';; [Problem 7]\n;; Problem 7\n(define next-collatz\n  (lambda (x)\n    (cond\n      [(odd? x) (+ (* x 3) 1)]\n      [else (/ x 2)])))\n; next-collatz takes a variable x and returns in two different condiotions whether\n; it is odd or even\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (138,7,'imre',';; [Problem 6]\n;; Problem 6\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? \'north direction) \'east]\n      [(equal? \'east direction) \'south]\n      [(equal? \'south direction) \'west]\n      [(equal? \'west direction) \'north]\n      [else \'error])))\n; next-compass takes a variable direction and returns direction in anti-clockwise \n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (139,10,'imre',';; [Problem 9]\n;; Problem 9\n(define up-or-down\n  (lambda (n)\n    (if (equal? (random 2) 0)\n        (+ n 1)\n        (- n 1))))\n; up-or-down takes a variable n and returns random value by adding or subtracting 1\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (140,2,'imre',';; [Problem 1b]\n;; Problem 1b\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n; least-of-three takes variables x,y,and z and pre-defined function will take\n; pairs and the remaining. Last of all, the least is returned\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (141,9,'imre',';; [Problem 8]\n;; Problem 8\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? \'a dna) \'t]\n      [(equal? \'t dna) \'a]\n      [(equal? \'g dna) \'c]\n      [(equal? \'c dna) \'g]\n      [else \'error])))\n; dna-complement takes a variable dna a,t,c,and g and returns into corresponding dna\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (142,12,'alice',';; [Problem 11]\n;11\n; either-even? takes two numbers and checks to see if either of the numbers are even. If so, it\'s true. If not, it\'s false.\n(define either-even?\n  (lambda (x y)\n    (if (even? x)\n        #t\n        (even? y))))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (143,11,'alice',';; [Problem 10]\n;10\n; both-odd? takes too numbers and returns true if and only if they are both odd\n(define both-odd?\n  (lambda (x y)\n    (if (odd? x)\n        (odd? y)\n        #f)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (144,1,'alice',';; [Problem 1a]\n; 1a\n; least takes two numbers and returns the least of the two\n(define least\n  (lambda (x y)\n    (if (< x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (145,4,'alice',';; [Problem 3]\n; 3\n; curious takes a number and tells you whether 1 more than that number is a perfect square and if the number one more\n; than its half is a perfect square\n(define curious?\n  (lambda (x)\n    (cond\n      [(and (perfect-square? (+ 1 x))(perfect-square? (+ 1 (/ x 2)))) #t]\n      [else #f])))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (146,3,'alice',';; [Problem 2]\n; 2\n; next-even takes a number and returns the next even by adding one or two depending on whether or not it is odd or even\n(define next-even\n  (lambda (x)\n    (if (even? x)\n        (+ x 2)\n        (+ x 1))))\n\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (147,6,'alice',';; [Problem 5]\n;5\n; opposite takes eith \'evil or \'good and returns the other of the two\n(define opposite\n  (lambda (attitude)\n    (if (equal? attitude \'good)\n        \'evil\n        \'good)))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (148,5,'alice',';; [Problem 4]\n; 4\n; sleep-in takes a day of the week and tells you whether you can sleep in on that day\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (149,8,'alice',';; [Problem 7]\n;7\n; dna-complement takes a dna type and returns the complement according to the type\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? dna \'a) \'t]\n      [(equal? dna \'t) \'a]\n      [(equal? dna \'g) \'c]\n      [(equal? dna \'c) \'g]\n      [else \'error])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (150,7,'alice',';; [Problem 6]\n;6\n; next-compass takes a standard direction and returns the direction 90 degrees clockwise\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (151,10,'alice',';; [Problem 9]\n;9\n; pick-one-at-random takes two arguments and randomly chooses one of the two to return\n(define pick-one-at-random\n  (lambda (arg1 arg2)\n    (if (<= (random 10) 5)\n        arg1\n        arg2)))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (152,2,'alice',';; [Problem 1b]\n; 1b\n; least-of-three takes three numbers and returns which is the least of the three\n(define least-of-three\n  (lambda (x y z)\n    (cond\n      [(and (< x y)(< x z)) x]\n      [(and (< y x)(< y z)) y]\n      [else z])))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (153,9,'alice',';; [Problem 8]\n;8\n; up-or-down takes a number and randomly either adds one or subracts one from the input\n(define up-or-down\n  (lambda (x)\n    (if (<= (random 10) 5)\n        (+ x 1)\n        (- x 1))))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (154,12,'bob',';; [Problem 11]\n;This operation will take two inputs and determine, through a series of \n;if statements, whether both of the inputs are odd.  If one or both of them\n;are not, #f will be returned.\n(define both-odd?\n  (lambda (x y)\n    (if (odd? x)\n        (if (odd? y)\n            #t\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (155,11,'bob',';; [Problem 10]\n;This operation will take 2 input values and, based on a random selection,\n;will produce either x or y as an output\n(define pick-one-at-random\n  (lambda (x y)\n    (cond\n      [(= (random 2) 1) x]\n      [else y])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (156,13,'bob',';; [Problem 12]\n;This operation will determine whether one or both of the input values are\n;even.  If both of them are odd, then #f will be returned.\n(define either-even?\n  (lambda (x y)\n    (cond\n      [(integer? x) (even? x)]\n      [(integer? y) (even? y)]\n      [else #f])))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (157,1,'bob',';; [Problem 1a]\n;This operation will take two inputs, x and y, and determine with an \n;inequality function, which is the lesser value\n(define least\n  (lambda (x y)\n    (if (> x y)\n        y\n        x)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (158,4,'bob',';; [Problem 3]\n;This operation will test if the square root of a number, and the square\n;root of half of a number, labeled x, will be an integer, determining\n;if the number is curious.\n(define curious?  \n  (lambda (x)\n    (if (integer? (sqrt (+ 1 x)))\n        (if (integer? (sqrt (+ 1 (/ x 2))))\n            #t\n            #f)\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (159,3,'bob',';; [Problem 2]\n;This proedure will use an if statement that will determine whether a \n;number is odd or even, then will ad either 1 or 2 to that number to \n;get to the next even number\n(define next-even\n  (lambda (n)\n    (if (odd? n)\n        (+ n 1)\n        (+ n 2))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (160,6,'bob',';; [Problem 5]\n;This operation will take the input of good or evil and will return the\n;opposite operation of good or evil\n(define opposite\n  (lambda (word)\n    (cond\n      [(equal? word \"good\") \"evil\"]\n      [else \"good\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (161,5,'bob',';; [Problem 4]\n;This function will determine \'saturday or \'sunday that will return a \n;result that says that you can sleep in.  Any other day of the week\n;will return #f\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (162,8,'bob',';; [Problem 7]\n;The next-collatz procedure uses the Collatz function to determine the next\n;number in the dequence, by differentiating between even and odd numbers. \n(define next-collatz\n  (lambda (n)\n    (cond\n      [(even? n) (\\ n 2)]\n      [else (+ (* n 3) 1)])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (163,7,'bob',';; [Problem 6]\n;This operation will take one of the four cardinal directions, and return\n;the next direction in a clockwise direction\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (164,10,'bob',';; [Problem 9]\n;This operation will take an input, and according to the random function,\n;will randomly determine to raise or lower the input value by 1\n(define up-or-down\n  (lambda (x)\n    (cond \n      [(= (random 2) 1) (+ x 1)]\n      [else (- x 1)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (165,2,'bob',';; [Problem 1b]\n;Using the \"least\" function that was defined previously, and expanded it \n;to allow the comparison of of three numbers\n(define least-of-three\n  (lambda ( x y z)\n    (least (least x y) (least y z))))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (166,9,'bob',';; [Problem 8]\n;The dna-complement will determine, according to an input of the dna sequence\n;to determine the next letter in the sequence.  Any other number input that\n;is not in the sequence will return an error.\n(define dna-complement\n  (lambda (code)\n    (cond\n      [(equal? code \'a) \'t]\n      [(equal? code \'t) \'a]\n      [(equal? code \'g) \'c]\n      [(equal? code \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (167,12,'charles',';; [Problem 11]\n; 11. Here, if both arguments are odd integers, #t will be the result for\n; both-odd?.  Otherwise, it will be #f.\n\n (define both-odd?\n  (lambda (arg1 arg2)\n    (cond\n      [(not (integer? arg1)) #f]\n      [(not (odd? arg1)) #f]\n      [(not (integer? arg2)) #f]\n      [(not (odd? arg2)) #f]\n      [else #t])))\n\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (168,11,'charles',';; [Problem 10]\n; 10. Here, there are two arguments in the pick-one-at-random procedure.\n; As a random pick, one of the two will be the result.\n\n(define pick-one-at-random\n  (lambda (arg1 arg2)\n    (cond\n      [(equal? (random 2) 1) arg1]\n      [else arg2])))\n\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (169,13,'charles',';; [Problem 12]\n; 12. Here, in either-even?, if one or the other (or both) arguments are even\n; integers, #t will be the result.\n\n(define either-even?\n  (lambda (arg1 arg2)\n    (cond\n      [(not (integer? arg1)) \n       (cond\n         [(not (integer? arg2)) #f]\n         [(not (even? arg2)) #f]\n         [else #t])]\n      [(not (even? arg1)) \n       (cond\n         [(not (integer? arg2)) #f]\n         [(not (even? arg2)) #f]\n         [else #t])]\n      [else #t])))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (170,1,'charles',';; [Problem 1a]\n; 1. a. Here, my goal is to get the least of two\n; integers as my result.\n\n(define least\n  (lambda (x y)\n    (if (<= x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (171,4,'charles',';; [Problem 3]\n; 3. Here, if I add 1 to the integer, it should be a perfect square.\n; If I add one to the half of the square of the integer, it should\n; be a perfect square.\n\n(define curious?\n  (lambda (int)\n    (if (integer? (sqrt (+ int 1)))\n        (if (integer? (sqrt (+ (/ int 2) 1)))\n            #t\n            #f)\n        #f)))\n\n    \n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (172,3,'charles',';; [Problem 2]\n; 2. Here, I want to get the next highest even number from my variable.\n\n(define next-even\n  (lambda (x)\n(cond\n  [(even? x) (+ x 2)]\n  [ else (odd? x) (+ x 1)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (173,6,'charles',';; [Problem 5]\n; 5. Here, I want to get the opposite of either \"good\" or \"evil\" as my result\n; for the opposite procedure.\n\n(define opposite\n  (lambda (ge)\n    (cond\n      [(equal? ge \"good\") \"evil\"]\n      [ else (equal? ge \"evil\") \"good\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (174,5,'charles',';; [Problem 4]\n; 4. Here, I want to get true (#t) as my result, only on Saturday and Sunday\n; for when I put in the procedure sleep-in?.\n\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [ else #f])))\n\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (175,8,'charles',';; [Problem 7]\n; 7. Here, I want to get the next integer in the Collatz sequence.\n; sequence: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2,\n; 1, 4, 2, 1...\n\n(define next-collatz\n  (lambda (num)\n    (cond\n      [(odd? num) (+ 1 (* 3 num))]\n      [else (/ num 2)])))\n\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (176,7,'charles',';; [Problem 6]\n; 6. Here, I want to get the next 90 degree clockwise direction from the direction\n; entered.\n\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [ else (equal? direction \'west) \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (177,10,'charles',';; [Problem 9]\n; 9. Here, in the up-or-down procedure, n will either return the\n; next integer or previous integer.\n \n(define up-or-down\n  (lambda (n)\n    (cond\n      [(equal? (random 2) 1) (+ n 1)]\n      [else (- n 1)])))\n\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (178,2,'charles',';; [Problem 1b]\n; 1. b. Here, my goal is to get the least of the three\n; integers as my result.\n\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (179,9,'charles',';; [Problem 8]\n; 8. This procedure is about pairs. The goal is to pair a to t and g to c.\n; When any of these are entered with the procedure, you are to get it\'s \n; pair. Any other entrances should give an error message.\n\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? dna \'a) \'t]\n      [(equal? dna \'t) \'a]\n      [(equal? dna \'g) \'c]\n      [(equal? dna \'c) \'g]\n      [ else \'error])))\n\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (180,12,'debbie',';; [Problem 11]\n;#11\n;;both-odd? is a predicate that takes any two arguments such as booleans,\n;;integers, or symbols, and returns #t if and only if both arguments are\n;;odd integers. ;;note: do not use the and procedure.\n\n(define both-odd?\n  (lambda (arg1 arg2)\n    (if (integer? arg1)\n        (if (odd? arg1)\n            (if (integer? arg2)\n                (odd? arg2)\n                #f)\n            #f)\n        #f)))\n\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (181,11,'debbie',';; [Problem 10]\n;#10\n;;pick-one-at-random is a procedure that will take any two arguments such\n;;as a boolean, number, operator, symbol, etc. and give one of the two\n;;arguments as the result.\n\n(define pick-one-at-random\n  (lambda (arg1 arg2)\n    (if (= (random 2) 1)\n        arg1\n        arg2)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (182,13,'debbie',';; [Problem 12]\n;#12\n;;either-even? is a predicate that will take any two arguments and produce\n;;#t if one or both of the arguments are even intergers. Also, this\n;;includes the interger 0. ;;note: do not use the and or the or procedures.\n\n(define either-even?\n  (lambda (arg1 arg2)\n    (if (integer? arg1)\n        (if (integer? arg2)\n            (even? arg2)\n            (even? arg1))\n        (if (integer? arg2)\n            (even? arg2)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (183,1,'debbie',';; [Problem 1a]\n;#1 a.\n;;least is a procedure that will take any two intergers and return the one\n;;that is less than the other.\n\n(define least\n  (lambda (x y)\n    (cond\n      [(< x y) x]\n      [else y])))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (184,4,'debbie',';; [Problem 3]\n;#3\n;;curious? is a predicate that will take any postive interger x>0 and\n;;return true if x+1 is a perfect square and x/2 +1 is a perfect square,\n;;otherwise will return false.\n\n;defining perfect-square?\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x) )))\n\n\n(define curious?\n  (lambda (x)\n    (and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1)))))\n    \n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (185,3,'debbie',';; [Problem 2]\n;#2\n;;next-even is a procedure that will take any interger, n, and return the next\n;;smallest even interger which is either n+2 or n+1.\n\n(define next-even\n  (lambda (n)\n    (cond\n      [(even? n) (+ n 2)]\n      [else (+ n 1)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (186,6,'debbie',';; [Problem 5]\n;#5\n;;opposite is a procedure that will take either the string \"good\" or \"evil\"\n;;and return the string \"evil\" or \"good\" respectively.\n\n(define opposite\n  (lambda (str)\n    (if (equal? \"evil\" str)\n        \"good\"\n        \"evil\")))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (187,5,'debbie',';; [Problem 4]\n;#4\n;;sleep-in? is a predicate that will take any symbol and give the boolean\n;;#t if the symbol is either saturday or sunday, or else will give the\n;;boolean #f.\n\n(define sleep-in?\n  (lambda (days)\n    (or (equal? \'saturday days) (equal? \'sunday days))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (188,8,'debbie',';; [Problem 7]\n;#7\n;;next-collatz is a procedure that will take any interger, x, and provide the\n;;next number in the collatz sequence such that if the number, x, is even,\n;;then the result will be .5*x or if the number, x, is odd, then the result\n;;will be 3*x+1.\n\n(define next-collatz\n  (lambda (x)\n    (if (even? x)\n        (/ x 2)\n        (+ (* 3 x) 1))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (189,7,'debbie',';; [Problem 6]\n;#6\n;;next-compass is a procedure that will take a symbol that represents one\n;;of the standard directions includeing \'north \'south \'east or \'west and\n;;will return a symbol representing the direction that would be in the same\n;;position if the directions were rotated 90 degrees counter-clockwise.\n\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? \'north direction) \'east]\n      [(equal? \'east direction) \'south]\n      [(equal? \'south direction) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (190,10,'debbie',';; [Problem 9]\n;#9\n;;up-or-down is a procedure that will take any interger, n, and will produce\n;;an interger that is either n-1 or n+1, but will do so randomly.\n\n(define up-or-down\n  (lambda (n)\n    (if (= (random 2) 1)\n        (+ n 1)\n        (- n 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (191,2,'debbie',';; [Problem 1b]\n;#1 b.\n;;least-of-three is a procedure that takes any three intergers and returns\n;;the one that is less than the other two.\n\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (192,9,'debbie',';; [Problem 8]\n;#8\n;;dna-complement is a procedure that will take any symbol that represents one\n;;of the dna components such as \'a \'t \'g or \'c and produce the complement of\n;;the given component. The complements are; a and t, g and c. Also, if the\n;;symbol given is not a dna component, then the result will be the symbol\n;;\'error.\n\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? \'a dna) \'t]\n      [(equal? \'t dna) \'a]\n      [(equal? \'g dna) \'c]\n      [(equal? \'c dna) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (193,12,'fergie',';; [Problem 11]\n;Problem 11\n; make both odd take two integers and return if they are both odd\n(define both-odd?\n  (lambda (x y)\n    (if (integer? x)\n        (if (odd? x)\n            (if (odd? y)\n                (if (integer? y)\n                    #t\n                    #f)\n                #f)\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (194,11,'fergie',';; [Problem 10]\n;Problem 10\n;make pick-one-at-random choose one of two numbers at complete random\n(define pick-one-at-random\n  (lambda (x y)\n    (if (< 50 (random 100))\n        x\n        y)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (195,13,'fergie',';; [Problem 12]\n;Problem 12\n;take two numbers and check if they are either even\n(define either-even?\n  (lambda (x y)\n    (if (even? x)\n        #t\n        (if (even? y)\n            #t\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (196,4,'fergie',';; [Problem 3]\n;Problem 3\n;use perfect-square to help define curious? to prove whether a number is curious\n;or not\n(define perfect-square?\n  (lambda (v)\n    (integer? (sqrt v))))\n\n(define curious?\n  (lambda (v)\n    (if (and (perfect-square? (+ v 1)) (perfect-square? (+ (/ v 2) 1)))\n        #t\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (197,3,'fergie',';; [Problem 2]\n;Problem 2\n;take next-even and just give back the next even number in the sequence\n(define next-even\n  (lambda (num)\n    (if (even? (num))\n        (+ num 2)\n        (+ num 1))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (198,6,'fergie',';; [Problem 5]\n;Problem 5\n;use opposite to return evil or good\n(define opposite\n  (lambda (p)\n    (if (equal? p \"good\")\n        \"evil\"\n        \"good\")))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (199,5,'fergie',';; [Problem 4]\n;Problem 4\n;use sleep-in? to tell which days people can sleep in\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (200,8,'fergie',';; [Problem 7]\n;Problem 7\n;use next-collatz to create a sequence that returns the next figure for the \n;sequence\n(define next-collatz\n  (lambda (x)\n    (if (even? x)\n        (/ x 2)\n        (+ 1 (* 3 x)))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (201,7,'fergie',';; [Problem 6]\n;Problem 6\n;define next-compass to take a direction and turn it 90 degrees\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [else \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (202,10,'fergie',';; [Problem 9]\n;Problem 9\n;use random to define up-or-down to get a value 1 higher or 1 lower at random\n(define up-or-down\n  (lambda (x)\n    (if (< 50 (random 100))\n        (+ x 1)\n        (- x 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (203,9,'fergie',';; [Problem 8]\n;Problem 8\n;take the result of the dna-compliment and return the appropriate value. if\n;a bad entry is entered, return an error message\n(define dna-compliment\n  (lambda (dna)\n    (cond\n      [(equal? \'a dna) \'t]\n      [(equal? \'t dna) \'a]\n      [(equal? \'c dna) \'g]\n      [(equal? \'g dna) \'c]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (204,12,'genevieve',';; [Problem 11]\n;11.Define a predicate both-odd? that takes two arguments and returns #t if and only if they are both odd integers. Do not use the and form.\n\n(define both-odd?\n  (lambda (x y)\n    (if (integer? x)\n     (if (integer? y)\n         (if (odd? x)\n             (if (odd? y)\n                 #t\n                 #f)\n             #f)\n         #f)\n        #f)))\n               \n    \n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (205,11,'genevieve',';; [Problem 10]\n;10.Define a procedure pick-one-at-random that takes two arguments and returns one of them, selected at random with equal probability.\n\n(define pick-one-at-random\n  (lambda (a b)\n    (if (=(random 2) 1)\n        \n        a\n        b)))\n  \n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (206,13,'genevieve',';; [Problem 12]\n;12.Define a predicate either-even? that takes two arguments and returns #t if and only if one or the other (or possibly both) are even integers. Do not use either the and or or form. Note: zero is an even integer.\n\n(define either-even?\n  (lambda (x y)\n    (if (integer? x)\n        (if (even? x)\n            #t\n            #f)\n        (if (integer? y)\n            (if (even? y)\n                #t\n                #f)\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (207,1,'genevieve',';; [Problem 1a]\n;1(a.)Use if or cond to define a procedure least that takes two numbers and returns the smaller of the two.\n\n(define least\n  (lambda (x y)\n    (cond\n      [(<= x y) x]\n      [else y])))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (208,4,'genevieve',';; [Problem 3]\n;3.The number 48 is curious because if you add 1 to it the result is a perfect square, and if you add 1 to its half, you also get a perfect square. (You defined a predicate perfect-square? in the last homework, which you might find useful in solving this problem.) Define a predicate curious? that takes a non-negative integer x and returns #t if x is curious, and #f otherwise.\n\n(define curious?\n  (lambda (x)\n    (cond\n      [(integer? (sqrt (+ x 1))) \'#t]\n      [(integer? (sqrt (- x 1))) \'#t]\n      [else \'#f])))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (209,3,'genevieve',';; [Problem 2]\n;2.Scheme provides built-in predicates, even? and odd?, to test the indicated property of a given integer:\n\n(define next-even\n  (lambda (x)\n    (cond\n      [(even? x) (+ x 2)]\n      [else (+ x 1)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (210,6,'genevieve',';; [Problem 5]\n;5.The opposite of good is evil and the opposite of evil is good. Define a procedure opposite that takes either the string good or the string evil and returns the opposite string.\n\n(define opposite\n  (lambda (n)\n    (cond\n      [(equal? n \'\"good\") \'\"evil\"]\n      [(equal? n \'\"evil\") \'\"good\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (211,5,'genevieve',';; [Problem 4]\n;4.Define a predicate sleep-in? that takes a symbol representing a day of the week and returns #t if the given day is either saturday or sunday, and #f otherwise.\n\n(define sleep-in?\n  (lambda (n)\n    (cond\n      [(equal? n \'monday) #f]\n      [(equal? n \'tuesday) #f]\n      [(equal? n \'wednesday) #f]\n      [(equal? n \'thursday) #f]\n      [(equal? n \'friday) #f]\n      [(equal? n \'saturday) #t]\n      [(equal? n \'sunday) #t])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (212,8,'genevieve',';; [Problem 7]\n;7.Define a procedure next-collatz that takes a number in the Collatz sequence and returns the next number in the sequence.\n\n(define next-collatz\n  (lambda (n)\n    (cond\n      [(odd? n) (+ (* 3 n) 1)]\n      [(even? n) (/ n 2)])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (213,7,'genevieve',';; [Problem 6]\n;6.Define a procedure next-compass  that takes a symbol representing one of the four standard compass directions and returns the direction that is 90 degrees away in a clockwise direction.\n\n(define next-compass\n  (lambda (n)\n    (cond\n      [(equal? n \'north) \'east]\n      [(equal? n \'east) \'south]\n      [(equal? n \'south) \'west]\n      [(equal? n \'west) \'north])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (214,10,'genevieve',';; [Problem 9]\n;9.Use random to define a procedure up-or-down that takes an integer n and returns either the next integer or the previous integer, selected at random with equal probability.\n\n(define up-or-down\n  (lambda (n)\n    (if (=(random 2) 1)\n        (+ 1 n)\n        (- n 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (215,2,'genevieve',';; [Problem 1b]\n;1(b.)Use least to define a procedure least-of-three that takes three numbers and returns the smallest. Do not use if or cond.\n\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (216,9,'genevieve',';; [Problem 8]\n;8. Define a procedure dna-complement that takes a symbol representing one of the four nucleotides and returns the nucleotide that appears opposite it on the second strand. If the given symbol is not one of the four nucleotides, then return the symbol error.\n\n(define dna-complement\n  (lambda (n)\n    (cond\n      [(equal? n \'a) \'t]\n      [(equal? n \'t) \'a]\n      [(equal? n \'g) \'c]\n      [(equal? n \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (217,12,'harrison',';; [Problem 11]\n;11. This procedure finds out whether two arguments are both odd numbers and\n;returns #t if they are. It does this by saying if the numbers are not integers\n;and are not odd, they are false.\n(define both-odd?\n  (lambda (arg1 arg2)\n    (cond\n      [(not (integer? arg1)) #f]\n      [(not (odd? arg1)) #f]\n      [(not (integer? arg2)) #f]\n      [(not (odd? arg2)) #f]\n      [else #t])))\n\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (218,11,'harrison',';; [Problem 10]\n;10. This procedure randomly picks 1 or 0. If it is one, it will return the\n;variable arg1. Else it returns arg2.\n(define pick-one-at-random\n  (lambda (arg1 arg2)\n    (cond\n      [(equal? (random 2) 1) arg1]\n      [else arg2])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (219,13,'harrison',';; [Problem 12]\n;12. This procedure determines whether the first number is an integer. If it \n;isn\'t, it tests the 2nd number to see if it is even and an integer. It also\n;tests whether the first number is even. If it isn\'t, it tests the second number\n;again. Else, everything is false.\n(define either-even?\n  (lambda (arg1 arg2)\n    (cond\n      [(not (integer? arg1)) (cond\n                               [(not (integer? arg2)) #f]\n                               [(not (even? arg2)) #f]\n                               [else #t])]\n      [(not (even? arg1)) (cond\n                             [(not (integer? arg2)) #f]\n                             [(not (even? arg2)) #f]\n                             [else #t])]\n      [else #t])))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (220,1,'harrison',';; [Problem 1a]\n;1. a. This procedure takes two numbers and compares them to each other,\n;returning the smallest number. \n(define least\n  (lambda (num1 num2)\n    (if (<= num1 num2)\n        num1\n        num2)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (221,4,'harrison',';; [Problem 3]\n;3. This procedure will determine if adding 1 to a number gives\n;a perfect square as well as one plus it\'s half. It does this by\n;first determining if the square root of 1 plus the number is an integer\n; and then determing if half of the number plus 1 is an integer\n;and returning true if both are correct.\n(define curious?\n  (lambda (x)\n    (if (integer? (sqrt (+ x 1)))\n        (if (integer? (sqrt (+ (/ x 2) 1)))\n            #t\n            #f)\n        #f)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (222,3,'harrison',';; [Problem 2]\n;b. This procedure finds the least of three numbers. It does so by running the\n;2. This procedure will determine if a number is odd. If it is odd, the procedure\n;will add 1 to it to give the next even number. If it is even, the procedure\n;will add 2 to the number to give the next even number.\n(define next-even\n  (lambda (n)\n    (cond\n      [(odd? n) (+ n 1)]\n      [else (+ n 2)])))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (223,6,'harrison',';; [Problem 5]\n;5. This procedure determines the opposite alignment. It takes a variable that\n;is defined by either the string evil or the string good and returns the opposite\n;string. If anything else is entered, it returns an error.\n(define opposite\n  (lambda (alignment)\n    (cond\n      [(equal? alignment \"good\") \"evil\"]\n      [(equal? alignment \"evil\") \"good\"]\n      [else \"Error. Please enter either evil or good.\"])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (224,5,'harrison',';; [Problem 4]\n;4. This procedure will determine if you can sleep in based on the day in the\n;week. It does this by setting the days monday-friday as false and saturday \n;and sunday as true. Anything else is an error.\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'monday) #f]\n      [(equal? day \'tuesday) #f]\n      [(equal? day \'wednesday) #f]\n      [(equal? day \'thursday) #f]\n      [(equal? day \'friday) #f]\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else \"Error. Please enter a day of the week\"])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (225,8,'harrison',';; [Problem 7]\n;7. This procedure multiplies an odd number by three and adds one and then if it\n;is even it will divide the number by 2. It does this by figuring out if the \n;number is odd by using the odd? procedure to figure out whether the number is \n;odd or not through a cond. If it is odd, then it will return the number, times\n;three and added to one. If it isn\'t, it returns half of the number.\n(define next-collatz\n  (lambda (num)\n    (cond\n      [(odd? num) (+ 1 (* 3 num))]\n      [else (/ num 2)])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (226,7,'harrison',';; [Problem 6]\n;6. This procedure determines what the direction 90 degrees clockwise from\n;the entered direction by determining what the direction is equal to and\n;returning the corresponding other direction. Else is an error.\n(define next-compass\n  (lambda (direction)\n    (cond\n      [(equal? direction \'north) \'east]\n      [(equal? direction \'east) \'south]\n      [(equal? direction \'south) \'west]\n      [(equal? direction \'west) \'north]\n      [else \"Error. Please enter a standard compass direction\"])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (227,10,'harrison',';; [Problem 9]\n;9. This procedure randomly picks 1 or 0. If it is 1, it will add 1 to the variable\n;n. If it is 0, it will subtract 1.\n(define up-or-down\n  (lambda (n)\n    (cond\n      [(equal? (random 2) 1) (+ n 1)]\n      [else (- n 1)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (228,2,'harrison',';; [Problem 1b]\n;b. This procedure finds the least of three numbers. It does so by running the\n;first two numbers through the least procedure and then running the return of the\n;least procedure through the least procedure again, but this time with the third\n;number.\n(define least-of-three\n (lambda(num1 num2 num3)\n    (least (least num1 num2) num3)))\n\n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (229,9,'harrison',';; [Problem 8]\n;8. This procedure takes a dna letter and returns its compliment. It does this\n;by using cond for each case. In the first three cases, it finds out what letter\n;dna is equal to. If it is t, it returns a and vice-versa. If it is g, it returns\n;c and vise versa. Else is an error.\n(define dna-complement\n  (lambda (dna)\n    (cond\n      [(equal? dna \'a) \'t]\n      [(equal? dna \'t) \'a]\n      [(equal? dna \'g) \'c]\n      [(equal? dna \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (230,12,'ingrid',';; [Problem 11]\n; problem 11\n; predicate both-odd? takes 2 arguements and returns #t if they are both odd\n\n(define both-odd?\n  (lambda (y z)\n    (if (odd? y)\n        (if (odd? z)\n            #t\n            #f)\n        #f)))\n\n','Problem 11: both-odd?  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (231,11,'ingrid',';; [Problem 10]\n; problem 10\n; procedure that takes 2 arguements and randomly returns 1\n\n(define pick-one-at-random\n  (lambda (x y)\n    (if (= (random 2) 0)\n        x\n        y)))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (232,13,'ingrid',';; [Problem 12]\n; problem 12\n; predicate either-even? takes 2 arguements and returns #t if either or both are even\n\n(define either-even?\n  (lambda (x y)\n    (if (even? x)\n        #t\n        (if (even? y)\n            #t\n            #f))))\n\n','Problem 12: either-even? -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (233,1,'ingrid',';; [Problem 1a]\n; Problem 1\n; Takes 2 numbers and returns the smaller number\n\n(define least\n  (lambda (x y)\n    (if (< x y)\n        x\n        y)))\n\n','Problem 1a: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (234,4,'ingrid',';; [Problem 3]\n; problem 3\n; define a predicate which says if a number is curious the number +1 and the number\n; /2 +1 both are perfect squares\n\n(define curious?\n  (lambda (x)\n    (and (integer? (sqrt (+ x 1))) (integer? (sqrt (+ (/ x 2) 1))))))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (235,3,'ingrid',';; [Problem 2]\n; Problem 2\n; use the predicates even and odd to find the next even number\n\n(define next-even\n  (lambda (n)\n    (if (odd? n)\n        (+ n 1)\n        (+ n 2))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (236,6,'ingrid',';; [Problem 5]\n; problem 5\n; procedure takes good or evil and returns the opposite\n\n(define opposite\n  (lambda (n)\n    (if (equal? n \'evil)\n        \'good\n        \'evil)))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (237,5,'ingrid',';; [Problem 4]\n; problem 4\n; sleep-in? takes a symbol rep. a day, returns #t if saturday or sunday and returns #f\n; for every other day\n\n(define sleep-in?\n  (lambda (day)\n    (cond\n      [(equal? day \'saturday) #t]\n      [(equal? day \'sunday) #t]\n      [else #f])))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (238,8,'ingrid',';; [Problem 7]\n; problem 7\n; procedure next-collatz takes a positive integer and gives the next number\n; in the collatz sequence\n\n(define next-collatz\n  (lambda (a)\n    (if (odd? a)\n        (+ (* a 3) 1)\n        (/ a 2))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (239,7,'ingrid',';; [Problem 6]\n; problem 6\n; procedure next-compass takes one of the four directions and returns the next direction clockwise\n\n(define next-compass\n  (lambda (x)\n    (cond\n      [(equal? x \'north) \'east]\n      [(equal? x \'east) \'south]\n      [(equal? x \'south) \'west]\n      [(equal? x \'west) \'north]\n      [else \'error])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (240,10,'ingrid',';; [Problem 9]\n; problem 9\n; procedure up-or-down takes n returns the next or previous integer\n\n(define up-or-down\n  (lambda (n)\n    (if (= (random 2) 0)\n        (+ n 1)\n        (- n 1))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (241,2,'ingrid',';; [Problem 1b]\n; part b, use least to make a new procedure which finds the least of three numbers \n\n(define least-of-three\n  (lambda (x y z)\n    (least (least x y) z)))\n      \n','Problem 1b: least-of-three -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (242,9,'ingrid',';; [Problem 8]\n; problem 8\n; procedure takes a symbol representing a DNA strand and returns its complement\n\n(define dna-complement\n  (lambda (strand)\n    (cond\n      [(equal? strand \'a) \'t]\n      [(equal? strand \'t) \'a]\n      [(equal? strand \'g) \'c]\n      [(equal? strand \'c) \'g]\n      [else \'error])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (243,14,'albert',';; [Problem 1]\n; some list definitions\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons \'g \'()) \'()) \'()))\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (244,16,'albert',';; [Problem 3]\n;Problem 3\n;Takes a list of numbers and adds a number in the beginning one lower of the first number in that list\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (245,15,'albert',';; [Problem 2]\n; Problem 2\n; Takes a number x and returns a list of x-1 and x+1\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (246,17,'albert',';; [Problem 4]\n; Problem 4\n; Takes a list of numbers, replaces first two numbers with double the first number and adding the second\n(define scrunch-bits\n  (lambda (ls)\n   (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (247,19,'albert',';; [Problem 6]\n; Problem 6\n\n(define hugs-and-kisses\n  (lambda (n)\n    (if (equal? (- n 1) 0)\n        \'(x o)\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? (cdr ls)) 0]\n      [(equal? (car ls) \'bean) (+ 1 (bean-counter (cdr ls)))]\n      [(equal? (car (cdr ls)) \'bean) (+ 1 (bean-counter (cdr ls)))]\n      [else (+ 0 (bean-counter (cdr ls)))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (248,24,'boris',';; [Problem 10]\n; Problem 10\n; penny-pincher takes a list and returns the list with all the top-level\n; occurrences of the symbol penny removed\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (249,25,'boris',';; [Problem EC1]\n; Extra Credit\n; next-curious takes a non-negative integer x and returns the next\n; curious integer larger than x\n(define next-curious\n  (lambda (x)\n    (cond\n       [(curious? (+ x 1)) (+ x 1)]\n       [else (next-curious (+ x 1))])))\n     \n    \n; Extra Credit Helper\n; curious takes a non-negative integer x and returns #t if adding 1 to \n; 1/2x results in a perfect square\n(define curious?\n  (lambda (x)\n    (and (integer? (sqrt(+ 1(/ x 2)))) (integer? (sqrt (+ 1 x))))))\n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (250,22,'boris',';; [Problem 8b]\n; Problem 8b\n; inventory-pockets takes a list of symbols representing the contents of\n; someone\'s pockets and returns the total value in cents of the coind found\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls)\n          0\n          (+ (coin->cents (car ls)) (inventory-pockets (cdr ls))))))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (251,21,'boris',';; [Problem 8a]\n; Problem 8a\n; coin->cents takes a symbol representing a common U.S. coin and returns\n; the corresponding value of the coin in cents\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'quarter) 25]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'penny) 1]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (252,14,'boris',';; [Problem 1]\n; Problem 1\n; building lists\n(define ls1 (cons 1 \n              (cons 2 \'())))\n(define ls2 (cons 3 \n              (cons 4 \n                (cons 5 \'()))))\n(define ls3 (cons \n              (cons 6 \'()) \n                (cons (cons 7 \'()) \n                  (cons (cons 8 \'()) \'()))))\n(define ls4 (cons \n              (cons 9 \n                (cons 10 \'())) \n                  (cons 11 \'())))\n(define ls5 (cons 12 \n              (cons \n                (cons 13 \n                  (cons 14 \'())) \'())))\n(define ls6 (cons 15 \n              (cons \n                (cons 16 \n                  (cons \n                    (cons 17 \'()) \'())) \'())))\n(define ls7 (cons \n              (cons \n                (cons 18 \'()) \n                  (cons 19 \'()))\n                    (cons 20 \'())))\n(define ls8 (cons \'a \n              (cons \'b \n                (cons \'c \n                  (cons \'d \n                    (cons \'e \n                      (cons \'f \'())))))))\n(define ls9 (cons \n              (cons \n                (cons \n                  (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons \n               (cons \'h (cons \'i \'()))\n                 (cons \n                   (cons \'j (cons \'k \'()))\n                     (cons\n                       (cons \'m (cons \'n \'()))\'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (253,16,'boris',';; [Problem 3]\n; Problem 3\n; extend-sequence takes a non-empty list beginning with a number and\n; returns the list with one additional number at the front which is\n; one less than the number at the front of the given list\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (254,15,'boris',';; [Problem 2]\n; Problem 2\n; neighbors takes an integer, x, and retunrs a list containing the \n; integer to its left and the integer to its right on the number line\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (255,18,'boris',';; [Problem 5]\n; Problem 5\n; count-down takes a positive integer, n, and returns a list\n; of the integers from n down to 1, followed by the symbol blastoff!\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (256,17,'boris',';; [Problem 4]\n; Problem 4\n; scrunch-bits takes a list of two or more numbers and returns the list\n; with the first two numbers replaced by the result of doubling\n; the first number and adding the second\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (car (cdr ls))(* 2 (car ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (257,20,'boris',';; [Problem 7]\n; Problem 7\n; bean-counter takes a list and returns the number of times the symbol, bean,\n; occurs at top level\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (+ 0 (bean-counter (cdr ls)))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (258,19,'boris',';; [Problem 6]\n; Problem 6\n; hugs-and-kisses takes a nonnegative integer, n, and returns a list\n; of n x\'s and o\'s\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (259,23,'boris',';; [Problem 9]\n; Problem 9\n; double-dare takes a list and returns all top-level occurrences\n; of the symbol dare doubled\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'dare (car ls)) (cons (car ls) (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (260,24,'cathy',';; [Problem 10]\n;PROBLEM 10\n;i am going to define penny pincher so that it takes a list and returns the list with\n;all top level occurences of the symbol penny removed from the list\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (261,25,'cathy',';; [Problem EC1]\n;EXTRA CREDIT\n;i am going to define the procedure next curious so that it takes a non-negative integer\n;and returns the next curious integer larger than the other\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n(define curious?\n  (lambda (x)\n    (if (and (perfect-square? (+ x 1)) (perfect-square? (+ 1 (/ x 2))))\n        #t\n        #f)))\n\n(define next-curious\n  (lambda (x)\n    (cond\n      [(equal? x 0) 0]\n      [(curious? (+ x 1))\n       (+ x 1)]\n      [else (next-curious (+ x 1))])))      \n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (262,22,'cathy',';; [Problem 8b]\n;PROBLEM 8 PART 2\n;i am going to define inventory pockets so that it totals the value of coins in one\'s pocket\n;by using the procedure coin->cents\n(define inventory-pockets\n  (lambda (ls)\n   (cond\n      [(null? ls) 0]\n      [(+ (coin->cents (car ls)) (inventory-pockets (cdr ls)))])))\n\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (263,21,'cathy',';; [Problem 8a]\n;PROBLEM 8 PART 1\n;i am going to define coin to cents so that when a symbol representing the coin will return\n;the corresponding value of the coin in cents\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'penny) \'1]\n      [(equal? coin \'nickel) \'5]\n      [(equal? coin \'dime) \'10]\n      [(equal? coin \'quarter) \'25]\n      [else \'0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (264,14,'cathy',';; [Problem 1]\n;PROBLEM 1\n;I am going to build a list using only cons, numbers, and the empty list\n(define ls1\n  (cons 1 (cons 2 \'())))\n(define ls2\n  (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3\n  (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n(define ls4\n  (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5\n  (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6\n  (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7\n  (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8\n  (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9\n  (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10\n  (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'()))(cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (265,16,'cathy',';; [Problem 3]\n;PROBLEM 3\n;i am going to define extend sequence so that it returns a number one less than the \n;number at front of given list, along with the rest of the list\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (266,15,'cathy',';; [Problem 2]\n;PROBLEM 2\n;i am going to define neighbors so that it returns a list of neighbor integers to the right\n;and to the left of the integer\n(define neighbors\n  (lambda (x)\n    (cons ( - x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (267,18,'cathy',';; [Problem 5]\n;PROBLEM 5\n;i am going to define count down to take postive integers and return a list of integers\n;from the number down followed with the string blastoff!\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (268,17,'cathy',';; [Problem 4]\n;PROBLEM 4\n;i am going to define scrunch list so that it returns the list with the first two numbers \n;replaced with the number of doubling the first number and adding the second\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (269,20,'cathy',';; [Problem 7]\n;PROBLEM 7\n;i am going to define bean counter so that everytime the word bean occurs at top level\n;it starts a count of the times it occurs at top level\n(define bean-counter\n  (lambda (ls)\n    (if (null? ls)\n        0\n        (if (equal? (car ls) \'bean)\n            (+ 1 (bean-counter (cdr ls)))\n            (bean-counter (cdr ls))))))\n\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (270,19,'cathy',';; [Problem 6]\n;PROBLEM 6\n;i am going to define hugs and kisses to take a nonnegative integer and return that amount \n;of x\'s and o\'s\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (271,23,'cathy',';; [Problem 9]\n;PROBLEM 9\n;i am going to define double dare so that it takes a list and returns the list with\n;all of the top level occurrences of the symbol dare doubled\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls)\'dare) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (272,24,'daniel',';; [Problem 10]\n#|\n10\nprocedure penny-pitcher takes list ls and returns removes symbol penny\n|#\n(define penny-pincher\n  (lambda (ls)\n    (cond \n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher(cdr ls)) ]\n      [else (cons (car ls) (penny-pincher(cdr ls)) )])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (273,25,'daniel',';; [Problem EC1]\n#|\n11\nProcedure next-curious takes non-negative int x and gives next curious integer \nlarger than x.\n|#\n(define next-curious \n  (lambda (x)\n    (if (equal? (curious? (+ x 1)) #t)\n         (+ 1 x)\n     (next-curious (+ x 1))\n        )))\n    \n (define perfect-square?\n  (lambda (x)\n    (if (= (* (round(sqrt x)) (round( sqrt x))) x)\n    #t\n    #f)))\n(define curious?\n  (lambda (x)\n    (if (and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1)))  \n        #t\n         #f)))\n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (274,22,'daniel',';; [Problem 8b]\n#|b\nprocedure inventory-pockets takes list representing coins and gives sum of it by using\ncoin->cents procedure\n|#\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls )\n        0\n        (+ (coin->cents (car ls)) (inventory-pockets(cdr ls) )) \n      )))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (275,21,'daniel',';; [Problem 8a]\n#|8\nwe need first non reqursive helper and after recursive procedure|#\n#|a\nprocedurecoun->cents takes a symbol representing coin and returns its value\n|#\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'penny) 1]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'quarter) 25]\n      [(equal? coin \'slug) 0]\n      [else 0 ])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (276,14,'daniel',';; [Problem 1]\n#|1\nBy using only procedure \"cons\",numbers and empty list we should bind the result to the\nindecated identifier\n|#\n(define ls1\n       (cons 1 (cons 2 \'())))\n\n(define ls2\n      (cons 3 (cons 4 (cons 5 \'()))))\n\n(define ls3\n    (cons (cons 6 \'())(cons (cons 7 \'()) (cons (cons 8 \'()) \'()) )))\n\n(define ls4\n     (cons (cons 9 (cons 10 \'())) (cons 11 \'() )))\n\n(define ls5\n      (cons 12 (cons (cons 13 (cons 14 \'())) \'() )))\n(define ls6\n    (cons 15  (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7\n    (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8\n    (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9\n    (cons  (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 \n   (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'() ))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (277,16,'daniel',';; [Problem 3]\n#|3\nprocedure named extend-sequence takes non-empty list and puts \none number that is less than \nfirst number to the front.\n|#\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (278,15,'daniel',';; [Problem 2]\n#|2\nprocedure named neighbors takes integer x and gives list containing to the right and that is on \nits left\n|#\n(define neighbors\n  (lambda (x)\n    (cons (- x 1)(cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (279,18,'daniel',';; [Problem 5]\n#|5\ntakes positive integer n and returns the list of integers n to one and \nblasstoff at the end\n|#\n(define count-down\n  (lambda (n)\n    (if (= n 0)\n        \'(blastoff!)\n         (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (280,17,'daniel',';; [Problem 4]\n#|\n4\nprocedure scrunch-bits takes two or more numbers and gives the same list but \nwhere two first numbers replaced by the result of doubling the first number and\nadding the second\n|#\n(define scrunch-bits\n  (lambda (ls)\n    (cons ( + (car (cdr ls)) (* 2 (car ls))) (cdr(cdr ls)) )))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (281,20,'daniel',';; [Problem 7]\n#|7\nProcedure bean-counter that takes a list ls and returns how many times in list we\nhave the symbol bean,if its not bean don\'t count it\n|#\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter(cdr ls)) )]\n      [else (bean-counter(cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (282,19,'daniel',';; [Problem 6]\n#|6\nprocedure hugs-and-kisses that takes a nonnegative integer n and returns list x\'s and o\'s\n|#\n(define hugs-and-kisses\n  (lambda (n)\n    (if (= n 0)\n        \'()\n    (cons \'x (cons \'o (hugs-and-kisses (- n 1) ) )))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (283,23,'daniel',';; [Problem 9]\n#|9\nprocedure double-dare takes list ls and doubles dare symbol if it \noccurs in list |#\n(define double-dare\n  (lambda (ls)\n    (cond \n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else   (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (284,24,'ellen',';; [Problem 10]\n; problem 10\n; procedure penny-pincher takes a list and returns the list with all top-level occurrences of the \n; symbol \'penny removed\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (285,25,'ellen',';; [Problem EC1]\n; problem 11\n; procedure next-curious takes a non-negative integer x and returns the next curious integer \n; larger than x\n(define next-curious\n  (lambda (x)\n    (cond\n      [(and (integer? (sqrt (+ x 2))) (integer? (sqrt (+ (/ (+ x 1) 2) 1)))) (+ x 1)]\n      [else (next-curious (+ x 1))])))\n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (286,22,'ellen',';; [Problem 8b]\n; problem 8b\n; procedure inventory-pockets takes a list of symbols representing the contents of someone\'s pockets \n; and returns the total value in cents of the coins found\n(define inventory-pockets\n  (lambda (inventory)\n    (cond\n      [(null? inventory) 0]\n      [else (+ (coin->cents (car inventory)) (inventory-pockets (cdr inventory)))])))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (287,21,'ellen',';; [Problem 8a]\n; problem 8a\n; procedure coin->cents takes a symbol representing a common U.S. coin and returns the corresponding\n; value of the coin in cents\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'quarter) 25]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'penny) 1]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (288,14,'ellen',';; [Problem 1]\n; problem 1\n; defining lists to variables\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons (cons \'h(cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (289,16,'ellen',';; [Problem 3]\n; problem 3\n; procedure extend-sequence takes a non-empty list beginning with a number and returns the \n; list with another number in front, that\'s one less than the original front number\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (290,15,'ellen',';; [Problem 2]\n; problem 2\n; procedure neighbors takes an integer and retuns a list containing the integer to its left\n; and the integer to its right on the number line\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (291,18,'ellen',';; [Problem 5]\n; problem 5\n; procedure count-down takes a positive integer n and returns a list of the integers from \n; n down to 1, followed by the symbol blastoff!\n(define count-down\n  (lambda (x)\n    (if (zero? x)\n        \'(blastoff!)\n        (cons x (count-down (- x 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (292,17,'ellen',';; [Problem 4]\n; problem 4\n; procedure scrunch-bits takes a list of two or more numbers and returns the list with \n; the first two numbers replaced by the result of doubling the first number and adding the \n; second.\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (293,20,'ellen',';; [Problem 7]\n; problem 7\n; procedure bean-counter takes a list and returns the number of times the symbol \'bean occurs\n; at top level, and not inside nested sublists\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (294,19,'ellen',';; [Problem 6]\n; problem 6\n; procedure hugs-and-kisses takes a nonnegative integer n and returns a list of n x\'s and o\'s\n(define hugs-and-kisses\n  (lambda (x)\n    (if (zero? x)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- x 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (295,23,'ellen',';; [Problem 9]\n; problem 9\n; procedure double-dare takes a list and returns the list with all top-level occurrences of the symbol\n; \'dare doubled\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'dare (car ls)) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (296,24,'francis',';; [Problem 10]\n;Problem 10\n;penny-pincher removes the top level of the word penny from a ls\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (297,22,'francis',';; [Problem 8b]\n;b.inventory-pockets finds the amount in someone\'s pocket but gives it in cent form\n(define inventory-pockets\n  (lambda (pocket)\n    (cond\n      [(null? pocket) 0]\n      [(zero? (coin->cents (car pocket))) (+ 0 (inventory-pockets (cdr pocket)))]\n      [else (+ (coin->cents (car pocket)) (inventory-pockets (cdr pocket)))])))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (298,21,'francis',';; [Problem 8a]\n;Problem 8\n;a.Turns the word for U.S. coin into that value\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? \'penny coin) 1]\n      [(equal? \'nickel coin) 5]\n      [(equal? \'dime coin) 10]\n      [(equal? \'quarter coin) 25]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (299,14,'francis',';; [Problem 1]\n;Problem 1\n;only gives a given input\n(define ls1 (cons 1 (cons 2 \'())))\n\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (300,16,'francis',';; [Problem 3]\n;Problem 3\n;make the list bigger by one but the number goes infornt and is one less than the previous front number\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (301,15,'francis',';; [Problem 2]\n;Problem 2\n;Find the number of neighbors to the left and right\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (302,18,'francis',';; [Problem 5]\n;Problem 5\n;Make a count-down system that goes from positive integer n to 1 then blastoff!\n(define count-down\n  (lambda (n)\n    (cond\n      [(zero? n) \'(blastoff!)]\n      [else (cons n (count-down (- n 1)))])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (303,17,'francis',';; [Problem 4]\n;Problem 4\n;Take the first number in the list and double and add the second one, but make sure to put it back in the list\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (304,20,'francis',';; [Problem 7]\n;Problem 7\n;Counts through the list for the number of times bean shows up in the list\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (305,19,'francis',';; [Problem 6]\n;Problem 6\n;Given n, number of nonnegative integers, it gives back that number of x\'s and o\'s\n(define hugs-and-kisses\n  (lambda (n)\n    (cond\n      [(zero? n) \'()]\n      [else (cons \'x (cons \'o (hugs-and-kisses (- n 1))))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (306,23,'francis',';; [Problem 9]\n;Problem 9\n;double-dare inserts an extra dare for ever dare in the top level of the list\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'dare (car ls)) (cons (car ls) (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (307,24,'garry',';; [Problem 10]\n; question 10\n; procedure penny-pincher that takes a list ls \n; and returns the list with all top-level occurrences \n; of the symbol penny removed.\n(define penny-pincher\n  (lambda (ls)\n    (if (null? ls)\n        \'()\n        (if (equal? (car ls) \'penny)\n            (penny-pincher (cdr ls))\n            (cons (car ls) (penny-pincher (cdr ls)))))))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (308,25,'garry',';; [Problem EC1]\n; question 11\n; procedure next-curious that takes a non-negative integer x \n; and returns the next curious integer larger than x\n(define next-curious\n  (lambda (x)\n    (if (and (integer?  (sqrt(+ x 1))) (integer? (sqrt(+ (/ x 2) 1))))\n        x\n        (next-curious(+ x 1)))))\n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (309,22,'garry',';; [Problem 8b]\n; b\n; procedure inventory-pockets  that takes a list of symbols \n; representing the contents of someone\'s pockets and returns \n; the total value (in cents) of the coins found. Ignore any symbols \n; that do not correspond to common U.S. coinage.\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls)\n        0\n        (+ (coin->cents (car ls)) (inventory-pockets (cdr ls)))))) \n\n','', 'DONE');
INSERT INTO `Answers` VALUES (310,21,'garry',';; [Problem 8a]\n; question 8\n; a\n; procedure coin->cents that takes a symbol representing\n; a common U.S. coin (i.e., either penny, nickel, dime, or quarter) \n; and returns the corresponding value of the coin in cents, as shown below.\n(define coin->cents\n  (lambda (n)\n    (cond\n      [(equal? n \'penny) 1]\n      [(equal? n \'nickel) 5]\n      [(equal? n \'dime) 10]\n      [(equal? n \'quarter) 25]\n      [else \'0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (311,14,'garry',';; [Problem 1]\n; question 1\n; using only cons, numbers, and the empty list, \n; build each of the following lists, binding the result \n; to the indicated identifier\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (312,16,'garry',';; [Problem 3]\n; question 3\n; procedure extend-sequence  that takes a non-empty list beginning \n; with a number and returns the list with one additional number at the front. \n; The new number is one less than the number at the front of the given list.\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (313,15,'garry',';; [Problem 2]\n; question 2\n; procedure neighbors that takes an integer, x, \n; and returns a list containing the integer to its left \n; and the integer to its right on the number line.\n(define neighbors\n  (lambda (n)\n    (cons (- n 1) (cons (+ n 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (314,18,'garry',';; [Problem 5]\n; question 5\n; procedure count-down that takes a positive integer n \n; and returns a list of the integers from n down to 1, \n; followed by the symbol blastoff!\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (315,17,'garry',';; [Problem 4]\n; question 4\n; procedure scrunch-bits  that takes a list of two or more numbers \n; and returns the list with the first two numbers replaced by the result \n; of doubling the first number and adding the second.\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (316,20,'garry',';; [Problem 7]\n; question 7\n;procedure bean-counter that takes a list ls \n; and returns the number of times the symbol bean occurs at top level, \n; meaning that you need not worry about examining the elements \n; inside nested sublists. \n(define bean-counter\n  (lambda (ls)\n    (if (null? ls)\n        \'0\n        (if (equal? (car ls) \'bean)\n            (+ 1 (bean-counter (cdr ls)))\n            (bean-counter (cdr ls))))))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (317,19,'garry',';; [Problem 6]\n; question 6\n; procedure hugs-and-kisses that takes a nonnegative integer n \n; and returns a list of n x\'s and o\'s.\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'X (cons \'O (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (318,23,'garry',';; [Problem 9]\n; question 9\n; procedure double-dare that takes a list ls \n; and returns the list with all top-level occurrences \n; of the symbol dare doubled.\n(define double-dare\n  (lambda (ls)\n    (if (null? ls)\n        \'()\n        (if (equal? \'dare (car ls))\n            (cons \'dare (cons \'dare (double-dare(cdr ls))))\n            (cons (car ls) (double-dare(cdr ls)))))))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (319,24,'heidi',';; [Problem 10]\n;10.  penny-pincher takes ls and returnsthe list with all top level\n;occurences of penny removed.\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (320,22,'heidi',';; [Problem 8b]\n;b.  inventory-pockets takes ls and returns the total.\n(define inventory-pockets\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(coin->cents (car ls)) (+ (coin->cents (car ls)) \n                               (inventory-pockets (cdr ls)))]\n      [else (inventory-pockets (cdr ls))])))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (321,21,'heidi',';; [Problem 8a]\n;8.  \n;a.  coin->cents takes x and returns the amount of the corresponding value.\n(define coin->cents \n  (lambda (x)\n    (cond\n      [(equal? x \'penny) 1]\n      [(equal? x \'nickel) 5]\n      [(equal? x \'dime) 10]\n      [(equal? x \'quarter) 25]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (322,14,'heidi',';; [Problem 1]\n1.  \n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons \'(6) (cons \'(7) (cons \'(8) \'()))))\n(define ls4 (cons \'(9 10) (cons 11 \'())))\n(define ls5 (cons 12 (cons \'(13 14) \'())))\n(define ls6 (cons 15 (cons \'(16 (17)) \'())))\n(define ls7 (cons \'((18) 19) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons \'(h i) (cons \'(j k) (cons \'(m n) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (323,16,'heidi',';; [Problem 3]\n;3.  extend-sequence takes ls and subtracts 1 from the first\n;number in the list and puts it back into the list.\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (324,15,'heidi',';; [Problem 2]\n;2.  neighbors takes x and returns a list containing the number \n;to its left and to its right.\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n  \n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (325,18,'heidi',';; [Problem 5]\n;5.  count-down takes n and returns a list of the integers from n down to 1 \n;followed by the symbol blastoff!\n(define count-down\n  (lambda (n)\n    (if (= n 0)\n        (cons \'blastoff! \'())\n        (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (326,17,'heidi',';; [Problem 4]\n;4.  scrunch-bits takes ls and returns the list with the first\n;two numbers replaced by the result of *2 the first number and + the second.\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (327,20,'heidi',';; [Problem 7]\n;7.  bean-counter takes ls and returns the number of times the symbol bean occurs.\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? (car ls) \'bean) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (328,19,'heidi',';; [Problem 6]\n;6.  hugs-and-kisses takes n and returns a list of n x\'s and o\'s.\n(define hugs-and-kisses\n  (lambda (n)\n    (if (= n 0)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (329,23,'heidi',';; [Problem 9]\n;9.  double-dare takes ls and returns the list with \'dare doubled.\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare (cons \'dare \n                                             (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (330,24,'imre',';; [Problem 10]\n; 10. can\'t solve\n; penny-pinncer takes a list and delete every single element if there is an\n; identical element, penny\n; 10.\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n       \n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (331,25,'imre',';; [Problem EC1]\n; 11.\n; next-curious takes a variable x and returns next curious number. Curious\n; number means a number which can be a perfect square when it is added 1 on\n; a number and divided by 2 and added 1\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x))))\n\n(define curious?\n  (lambda (x)\n    (if (perfect-square? (+ x 1))\n        (if (perfect-square? (+ (/ x 2) 1))\n            #t\n            #f)\n        #f)))\n       \n(define next-curious\n  (lambda (x)\n    (if (> x 0)\n        (if (curious? (+ x 1))\n            (+ x 1)\n            (next-curious (+ x 1)))\n        \'error)))\n\n','Problem EC1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (332,22,'imre',';; [Problem 8b]\n; (b)\n; inventory-pockets takes ls of coins in the pocket, convert a coin into\n; designated value of coins and sum it\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls)\n        0\n        (+ (coin->cents (car ls)) (inventory-pockets (cdr ls))))))\n\n','', 'DONE');
INSERT INTO `Answers` VALUES (333,21,'imre',';; [Problem 8a]\n; 8.\n; coin->cents takes designated symbol (American Coin) and returns a certain\n; value of the coin in cents corresponding with the designated symbol\n; (a)\n(define coin->cents\n  (lambda (symbol)\n    (cond\n      [(equal? \'penny symbol) 1]\n      [(equal? \'nickel symbol) 5]\n      [(equal? \'dime symbol) 10]\n      [(equal? \'quarter symbol) 25]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (334,14,'imre',';; [Problem 1]\n; 1.\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons \'(6) (cons \'(7) (cons \'(8) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons \'(h i) (cons \'(j k) (cons \'(m n) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (335,16,'imre',';; [Problem 3]\n; 3.\n; extend-sequence takes the ls and returns one additional element in the ls \n; which is just one below from the first element of list \n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (336,15,'imre',';; [Problem 2]\n; 2.\n; neighbors takes the variable x and returns two digits which are consecutive\n; digits surrounding variable x\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (337,18,'imre',';; [Problem 5]\n; 5.\n; count-down takes positive integer n and returns with decending consecutive\n; numbers of a list with blastoff in the end\n(define count-down\n  (lambda (n)\n    (if (positive? n)\n        (cons n (count-down (- n 1)))\n        (cons \'blastoff! \'()))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (338,17,'imre',';; [Problem 4]\n; 4.\n; scrunch-bits takes the ls and returns one additional element in the ls \n; by deleting two first element in the first and doubling the first and adding\n; the second element in the ls\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (339,20,'imre',';; [Problem 7]\n; 7.\n; bean-counter takes ls and returns how many times does the list contained\n; the word bean\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ (bean-counter (cdr ls)) 1)]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (340,19,'imre',';; [Problem 6]\n; 6. \n; hugs-and-kisses takes positive integer n and returns with repeated value of\n; x o \'n\'times\n(define hugs-and-kisses\n  (lambda (n)\n    (if (= n 0)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (341,23,'imre',';; [Problem 9]\n; 9. can\'t solve\n; double-dare takes a list and returns a duplicate of dare if there is an\n; identical element, dare\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (342,24,'alice',';; [Problem 10]\n;Inventory-pockets uses coins->cents and takes the contents of a list and \n;adds up how much money is in the list.  If anything is in the pocket beside\n;money, then nothing is added to the list\n(define inventory-pockets\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [else (+ (coin->cents (car ls)) (inventory-pockets (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (343,14,'alice',';; [Problem 1]\n;this operation takes the numbers 1 and 2 and puts them into a list\n(define ls1\n  (cons 1(cons 2 \'())))\n\n;This operation takes the numbers 3 4 and 5 and puts them in a single list\n(define ls2\n  (cons 3(cons 4(cons 5 \'()))))\n\n;This operation takes the numbers 6 7 and 8, puts them in individual lists,\n;then combines them all into one larger list\n(define ls3\n  (cons (cons 6\'())(cons (cons 7\'())(cons (cons 8\'())\'()))))\n\n;This operation takes the numbers 9 10 and 11, groups 9 and 10 together in\n;a list, then combines 11 into a larger list\n(define ls4\n  (cons (cons 9(cons 10\'()))(cons 11\'())))\n\n;This operation takes the numbers 12 13 and 14, combines the 13 and 14 into\n;one list, then combines 12 into a larger list\n(define ls5\n  (cons 12(cons (cons 13(cons 14\'()))\'())))\n\n;This operation creates a list around 17, then creates a list around that \n;using 16, then creates the larger list with 15 in that list.\n(define ls6\n  (cons 15(cons (cons 16(cons (cons 17\'())\'()))\'())))\n\n;This operation takes 18 and puts it into a list, then wraps a list with 19\n;in it around that list, then wraps the large list with 20 in it around\n;both lists\n(define ls7\n  (cons (cons (cons 18\'())(cons 19\'()))(cons 20\'())))\n\n;This operation takes a b c d e and f and combines them into one list\n(define ls8\n  (cons \'a(cons \'b(cons \'c(cons \'d(cons \'e(cons \'f \'())))))))\n\n;This operation takes the letter g and wraps it around 4 other lists with\n;nothing in those lists                            \n(define ls9\n  (cons (cons (cons (cons \'g\'())\'())\'())\'()))\n\n;This operation takes h and i, j and k, and m and n and creates the lists \n;around those elements, then wraps all of those lists into a larger list\n(define ls10\n  (cons(cons \'h(cons \'i \'()))(cons(cons \'j(cons \'k \'()))(cons(cons \'m(cons \'n \'()))\'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (344,16,'alice',';; [Problem 3]\n;Extend-sequqnce takes a list of number and extends the list one more element\n;in the negative direction on the number line\n(define extend-sequence\n  (lambda (ls)\n    (cons (- 1 (car ls))ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (345,15,'alice',';; [Problem 2]\n;Neighbors takes a number and creates a list with one higher and one lower\n;integer around it\n(define neighbors\n  (lambda (x)\n    (cons (- x 1)(cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (346,18,'alice',';; [Problem 5]\n;Count-down takes a number n and runs it through a recursive program that\n;will count it down all the way to 1.  When the count reaches 0, the program\n;is designed to end with Blastoff!\n(define count-down\n  (lambda (n)\n    (cond\n      [(zero? n) \'(blastoff!)]\n      [else (cons n(count-down (- n 1)))])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (347,17,'alice',';; [Problem 4]\n;Scrunch-bits takes a list, then takes the first number out of that list,\n;doubles it, then adds one to it, then cons that back on to the cdr of the \n;original list\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car(cdr ls)))(cdr(cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (348,19,'alice',';; [Problem 6]\n;Hugs-and-kisses takes a number and runs it through the recursion that will\n;add an x and o for every number until 0.  When the program reaches 0, then\n;the program takes the xs and os and combines them into one list.\n(define hugs-and-kisses\n  (lambda (n)\n    (cond\n      [(zero? n) \'()]\n      [else (cons \'x(cons \'o(hugs-and-kisses(- n 1))))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', 'DONE');
INSERT INTO `Answers` VALUES (349,23,'alice',';; [Problem 9]\n;Coins->cents takes a quoted value of cents and converts it to the proper\n;numeric value\n(define coin->cents\n  (lambda (n)\n    (cond\n      [(equal? n \'penny) (+ 1)]\n      [(equal? n \'nickel) (+ 5)]\n      [(equal? n \'dime) (+ 10)]\n      [(equal? n \'quarter) (+ 25)]\n      [else (+ 0)])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (350,24,'bob',';; [Problem 10]\n; 10  The procedure, penny-pincher,  takes a list, ls, and returns\n; the list with all top-level occurrences of the symbol, penny, removed.\n\n\n\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(equal? ls \'()) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls)(penny-pincher (cdr ls)))])))\n\n\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (351,22,'bob',';; [Problem 8b]\n; 8 b The procedure, inventory-pockets, takes a list of symbols\n; representing the contents of someone\'s pockets and returns the total \n; value of the coins found in cents.\n\n\n(define inventory-pockets\n  (lambda (ls)\n    (if (equal? ls \'())\n        0\n        (+ (coin->cents (car ls)) (inventory-pockets (cdr ls))))))\n\n\n\n','', '');
INSERT INTO `Answers` VALUES (352,21,'bob',';; [Problem 8a]\n; 8 a The procedure, coin->cents, takes a symbol representing a common U.S. coin\n; (either penny, nickel, dime, or quarter) and \n; returns the corresponding value of the coin in cents.\n\n\n\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'penny) 1]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'quarter) 25]                                                 \n      [else 0])))\n\n\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (353,14,'bob',';; [Problem 1]\n\n; 1 Here, I built lists only using cons.\n\n\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons \'(6) (cons \'(7) (cons \'(8) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons \'(17) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n             \n\n\n\n\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (354,16,'bob',';; [Problem 3]\n; 3 The procedure, extend-sequence, takes a non-empty list beginning with a number and returns the list with one additional number in the front.\n; The new number is oneless than the number at the front of the given list.\n\n\n\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n\n\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (355,15,'bob',';; [Problem 2]\n; #2 In the procedure, \"neighbors,\" the input of an integer will result in a \n; list.  The first number of the list will be one less than the input\n; and the second number in the list will be one less than the inputed integer.\n\n\n\n\n(define neighbors\n  (lambda (x)\n    (cons(- x 1) (cons (+ x 1) \'()))))\n\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (356,18,'bob',';; [Problem 5]\n; 5. The procedure, count-down, takes a positive integer, n, and returns a\n; list of the integers from n down to 1, followed by the symbol, blastoff!.\n\n\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n  \n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (357,17,'bob',';; [Problem 4]\n; 4 The procedure, scrunch-bits, takes a list of two or more numbers\n; and returns the list with the first two numbers replaced by the result of \n; doubling the first number and adding the second.\n\n\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n\n\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (358,20,'bob',';; [Problem 7]\n; 5. The procedure, count-down, takes a positive integer, n, and returns a\n; 7 The procedure, bean-counter, takes a list, ls, and returns the number\n; of times the symbol, bean, occurs at top level.\n\n\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(equal? ls \'()) 0]\n      [(equal? (car ls) \'bean) (+ (+ 0 1) (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (359,19,'bob',';; [Problem 6]\n; 5. The procedure, count-down, takes a positive integer, n, and returns a\n; 6 The procedure, hugs-and-kisses takes a nonnegative integer, n, and returns\n; a list of n x\'s  and o\'s.\n\n\n\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (360,23,'bob',';; [Problem 9]\n; 9 The procedure, double-dare that, takes a list, ls, and \n; returns the list with all top-level occurrences of the symbol, dare, doubled.\n\n\n\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(equal? ls \'()) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n\n\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (361,24,'charles',';; [Problem 10]\n;#10\n;;penny-pincher is a procedure that takes any list and returns a list\n;;that the original top-level list but without all of the symbols \'penny\n;;from the original list.\n\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (362,25,'charles',';; [Problem EC1]\n;#11\n;;next-curious is a procedure that takes any integer, x, greater than or\n;;equal to zero and returns the smallest curious integer that is greater\n;;than x.\n\n;;first, use the defined predicate curious? so it can be used in defining\n;;next-curious.\n\n(define perfect-square?\n  (lambda (x)\n    (integer? (sqrt x) )))\n(define curious?\n  (lambda (x)\n    (and (perfect-square? (+ x 1)) (perfect-square? (+ (/ x 2) 1)))))\n\n;;now, define next-curious.\n\n(define next-curious\n  (lambda (x)\n    (if (curious? (add1 x))\n        (add1 x)\n        (next-curious (add1 x)))))\n\n','Problem EC1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (363,22,'charles',';; [Problem 8b]\n;#8 a.\n;#8 b.\n;;inventory-pockets is a procedure that takes any list of any symbols\n;;that represent the coins, and other stuff in the pocket, and returns\n;;a number that represents the number of cents of all the coins added\n;;together.\n\n(define inventory-pockets\n  (lambda (stuff)\n    (if (null? stuff)\n        0\n        (+ (coin->cents (car stuff)) (inventory-pockets (cdr stuff))))))\n\n','', '');
INSERT INTO `Answers` VALUES (364,21,'charles',';; [Problem 8a]\n;#8 a.\n;;coin->cents is a procedure that takes any symbol that represents either\n;;a penny, nickel, dime, or quarter, and returns a number that represents\n;;the amount of cents that symbol represents. ;;note: any other symbol will\n;;return the number 0.;;\n\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'penny) 1]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'quarter) 25]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (365,14,'charles',';; [Problem 1]\n;#1\n;;Build the following lists using cons, numbers, and the empty list.\n\n(define ls1 (cons 1 (cons 2 \'())))\n\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n                             \n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) \n             (cons (cons \'m (cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (366,16,'charles',';; [Problem 3]\n;#3\n;;extend-sequence is a procedure that will take any non-empty list that\n;;begins with a number and return a non-empty list with the first\n;;component of that list being one less than the first number added\n;;to the original list.\n\n(define extend-sequence\n  (lambda (ls)\n    (cons (sub1 (car ls)) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (367,15,'charles',';; [Problem 2]\n;#2\n;;neighbors is a procedure that takes any integer and returns a list\n;;containing two integers, x+1 and x-1.\n\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (368,18,'charles',';; [Problem 5]\n;#5\n;;count-down is a procedure that takes any integer, n, greater than 0\n;;and returns a list of integers that contains n, n-1, n-2,... 2, 1,\n;;and then the last component of the list is the symbol blastoff!.\n\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (sub1 n))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (369,17,'charles',';; [Problem 4]\n;#4\n;;scrunch-bits is a procedure that takes a list of two or more integers\n;;and returns a list that has the first two integers replaces by two times\n;;the first number plus the second number.\n\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (370,20,'charles',';; [Problem 7]\n;#7\n;;bean-counter takes any list, ls, and returns a number equal to the number\n;;of times the symbol \'bean is an element of the list. ;;note: nested lists\n;;with bean components do not add to the number.;;\n\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (371,19,'charles',';; [Problem 6]\n;#6\n;;hugs-and-kisses is a procedure that takes any integer, n, greater than\n;;or equal to 0 and returns a list of n number of symbols x\'s and o\'s.\n\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (372,23,'charles',';; [Problem 9]\n;#9\n;;double-dare is a procedure that takes any list, ls, and returns a list\n;;that has the symbol dare in front of all of the symbols dare in the \n;;original top-level list.\n\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'dare (car ls)) (cons \'dare (cons (car ls) \n                                             (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (373,24,'debbie',';; [Problem 10]\n;Problem 10\n;penny-pincher takes a list, ls, and returns the list woth all top-level \n;occurences of the symbol penny removed.\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) ls]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (374,22,'debbie',';; [Problem 8b]\n;b) inventory-pockets takes a list of symbols representing the contents of a\n;pocket and returns the total value in cents of the coins found.\n(define inventory-pockets\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [else (coin->cents (car ls) (inventory-pockets (cdr ls)))])))\n\n','', '');
INSERT INTO `Answers` VALUES (375,21,'debbie',';; [Problem 8a]\n;Problem 8\n;a) coin->cents takes a symbol representing a common U.S. coin (penny, nickle,\n;etc) and returns the corresponding value of the coin in cents.\n(define coin->cents\n  (lambda (symbol)\n    (cond\n      [(equal? \'penny symbol) 1]\n      [(equal? \'nickle symbol) 5]\n      [(equal? \'dime symbol) 10]\n      [(equal? \'quarter symbol) 25]\n      [else 0])))\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (376,14,'debbie',';; [Problem 1]\n;Problem 1\n;lists are built from scratch.\n(define ls1\n    (cons 1 (cons 2 \'())))\n(define ls2\n  (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3\n  (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n(define ls4\n  (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5\n  (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 \n  (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n(define ls7\n  (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8\n  (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9\n  (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10\n  (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m \n                                                                (cons \'n \'()))\n                                  \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (377,16,'debbie',';; [Problem 3]\n;Problem 3\n;extend-sequence will take a non-empty list and return a list with one\n;additional number in the front that is one less than the first number of the\n;origional list\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (378,15,'debbie',';; [Problem 2]\n;Problem 2\n;neighbors will take a variable and return a list with the integers to its left \n;and right\n(define neighbors\n  (lambda (x)\n    (cons (- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (379,18,'debbie',';; [Problem 5]\n;Problem 5\n;count-down takes a positive integer, n, and returns a list of the integers from\n;n down to 1 followed by the symbol blastoff.\n(define count-down\n  (lambda (n)\n    (cond\n      [(equal? n 1) \'(1 blastoff!)]\n      [else (cons n (cons (count-down (- n 1)) \'()))])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (380,17,'debbie',';; [Problem 4]\n;Problem 4\n;scrunch-bits takes a list of two or more numbers and returns a list with the \n;the first two numbers replaced by the result of doubling the first number and\n;adding the second\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* (car ls) 2) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (381,20,'debbie',';; [Problem 7]\n;Problem 7\n;bean-counter takes a list and returns the number of times the symbol bean \n;occurs in the main list (sublists do not count).\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (382,19,'debbie',';; [Problem 6]\n;Problem 6\n;hugs-and-kisses takes a nonnegative integer, n, and returns a list of n \n;x\'s and o\'s.\n(define hugs-and-kisses\n  (lambda (n)\n    (cond\n      [(equal? n 0) \'()]\n      [else (- n 1) (hugs-and-kisses (cons \'x (cons \'o \'())))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (383,23,'debbie',';; [Problem 9]\n;Problem 9\n;double-dare takes a list, ls, and returns the list with all top-level occurences\n;of the symbol dare doubled.\n(define double-dare\n  (lambda (ls)\n    (cond \n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare ls)]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (384,22,'elvis',';; [Problem 8b]\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls)\n        0\n        (+ (coin->cents(car ls))(inventory-pockets(cdr ls))))))\n\n','', '');
INSERT INTO `Answers` VALUES (385,21,'elvis',';; [Problem 8a]\n;Program 8\n;define a program to translate coins into integers\n(define coin->cents\n  (lambda (cents)\n    (cond\n      [(equal? coin \'penny) 1]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'quater) 25]\n      [else 0])))\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (386,14,'elvis',';; [Problem 1]\n;Problem 1\n(define ls1 (cons 1(cons 2 \'())))\n(define ls2 (cons 3(cons 4( cons 5 \'()))))\n(define ls3 (cons(cons 6 \'())(cons(cons 7 \'())(cons(cons 8 \'())\'()))))\n(define ls4 (cons(cons 9(cons 10 \'()))(cons 11 \'())))\n(define ls5 (cons 12(cons(cons 13(cons 14 \'())) \'())))\n(define ls6 (cons 15(cons(cons 16(cons(cons 17 \'()) \'())) \'())))\n(define ls7 (cons(cons(cons 18 \'())(cons 19 \'()))(cons 20 \'())))\n(define ls8 (cons \'a(cons \'b(cons \'c(cons \'d(cons \'e(cons \'f \'())))))))\n(define ls9 (cons(cons(cons(cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons\n               (cons \'h\n                    (cons \'i \'()))\n               (cons(cons \'j(cons \'k \'()))(cons(cons \'m(cons \'n \'())) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (387,16,'elvis',';; [Problem 3]\n;Problem 2\n;Problem 3\n;make a program extend-sequence to add on one less than the first entry to the \n;beginning of a list\n\n(define extend-sequence\n  (lambda (ls)\n    (cons(- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (388,15,'elvis',';; [Problem 2]\n;Problem 2\n;define neighbors to take a number n and return a list with the number higher\n; and lower than it\n(define neighbors\n  (lambda (n)\n    (cons(- n 1)(cons(+ n 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (389,18,'elvis',';; [Problem 5]\n;Problem 5\n;make a countdown program to say blastoff when reaching the end\n(define count-down\n  (lambda (n)\n    (cond\n      [(= n 1) \'(1 blastoff!)]\n      [else (cons n(count-down (- n 1)))])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (390,17,'elvis',';; [Problem 4]\n;Problem 4\n;make scrunch-bits to take the first two numbers, double the first number and\n;add the second, then return it back to the program in place of the two first \n;numbers\n\n(define scrunch-bits\n  (lambda (ls)\n    (cons(+(* 2 (car ls)) (car(cdr ls))) (cdr(cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (391,20,'elvis',';; [Problem 7]\n;Program 7\n;define bean counter to count how many beans are in a sentence\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [(null? ls) 0]\n      [else 0])))\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (392,19,'elvis',';; [Problem 6]\n;Problem 6\n; make a program return x o for the amount of the number entered\n(define hugs-and-kisses\n  (lambda (n)\n    (cond\n      [(= n 0) \'()]\n      [else (cons x(cons o(hugs-and-kisses (- n 1))))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (393,23,'elvis',';; [Problem 9]\n;Problem 9\n;define double dare to double the amount of dares in a list\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? dare (car ls)) (cons dare(cons(car ls)(double-dare(cdr ls))))]\n      [else (cons(car ls)(double-dare(cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (394,24,'fergie',';; [Problem 10]\n;10.Define a procedure penny-pincher that takes a list ls and returns the list with all top-level occurrences of the symbol penny removed.\n\n\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [(cons (car ls) (penny-pincher (cdr ls)))])))\n\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (395,22,'fergie',';; [Problem 8b]\n;8(b).Define a procedure inventory-pockets that takes a list of symbols representing the contents of someone\'s pockets and returns the total value (in cents) of the coins found. Ignore any symbols that do not correspond to common U.S. coinage. Make use of your coin->cents procedure as a helper.\n\n\n(define inventory-pockets\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(+ 0 (coin->cents (car ls)) (inventory-pockets (cdr ls)))])))\n\n','', '');
INSERT INTO `Answers` VALUES (396,21,'fergie',';; [Problem 8a]\n;8(a).Define a procedure coin->cents that takes a symbol representing a common U.S. coin (i.e., either penny, nickel, dime, or quarter) and returns the corresponding value of the coin in cents, as shown below.\n\n\n(define coin->cents\n  (lambda (n)\n    (cond\n      [(equal? n \'penny) 1]\n      [(equal? n \'nickel) 5]\n      [(equal? n \'dime) 10]\n      [(equal? n \'quarter) 25]\n      [else 0])))\n\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (397,14,'fergie',';; [Problem 1]\n;1.Using only cons, numbers, and the empty list, build each of the following lists, binding the result to the indicated identifier. For example, the variable ls1 is created with (define ls1 (cons 1 (cons 2 \'()))). Build everything from scratch in a single expression. You may not use any variables or any quoted lists, other than the empty list. Be sure to evaluate your expressions in the repl to make sure that you have constructed the lists properly.\n\n(define ls1 (cons \'1 (cons \'2 \'())))\n\n(define ls2 (cons \'3 (cons \'4 (cons \'5 \'()))))\n\n(define ls3 (cons (cons \'6 \'()) (cons (cons \'7 \'()) (cons (cons \'8 \'()) \'()))))\n\n(define ls4 (cons( cons 9 (cons 10 \'())) (cons \'11 \'())))\n\n(define ls5 (cons \'12 (cons (cons \'13 (cons \'14 \'())) \'())))\n\n(define ls6 (cons \'15 (cons (cons \'16 (cons (cons \'17 \'()) \'())) \'())))\n\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n \n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (398,16,'fergie',';; [Problem 3]\n;3.Define a procedure extend-sequence that takes a non-empty list beginning with a number and returns the list with one additional number at the front. The new number is one less than the number at the front of the given list.\n\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (399,15,'fergie',';; [Problem 2]\n;2.Define a procedure neighbors that takes an integer, x, and returns a list containing the integer to its left and the integer to its right on the number line.\n\n(define neighbors\n  (lambda (n)\n    (cons (- n 1) (cons (+ 1 n) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (400,18,'fergie',';; [Problem 5]\n;5.Define a procedure count-down that takes a positive integer n and returns a list of the integers from n down to 1, followed by the symbol blastoff!.\n\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (401,17,'fergie',';; [Problem 4]\n;4.Define a procedure scrunch-bits that takes a list of two or more numbers and returns the list with the first two numbers replaced by the result of doubling the first number and adding the second.\n\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (402,20,'fergie',';; [Problem 7]\n;7.Define a procedure bean-counter that takes a list ls and returns the number of times the symbol bean occurs at top level, meaning that you need not worry about examining the elements inside nested sublists.\n\n\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? (car ls) \'bean) (+ 1 (bean-counter (cdr ls)))]\n      [else (+ 0 (bean-counter (cdr ls)))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (403,19,'fergie',';; [Problem 6]\n;6.Define a procedure hugs-and-kisses that takes a nonnegative integer n and returns a list of n x\'s and o\'s.\n\n(define hugs-and-kisses\n  (lambda (n)\n    (if (= n 0)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (404,23,'fergie',';; [Problem 9]\n;9.Define a procedure double-dare that takes a list ls and returns the list with all top-level occurrences of the symbol dare doubled.\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare(cons \'dare(double-dare(cdr ls))))]\n      [(cons (car ls) (double-dare (cdr ls)))])))\n    \n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (405,24,'genevieve',';; [Problem 10]\n;10. This procedure takes a list and removes any penny strings from the list/\n;First, a cond procedure is made. If the list is null, an empty set is returned.\n;If not, then the procedure takes the first value of the list and compares it\n;to the string penny. If they are equal, then it takes the list minus the first\n;element and runs it through penny-pincher again. If it is not, then it lists\n;the first value of the list and runs the cdr of the list through penny-pincher\n;to make sure that  the first words still get on the list. It continues through this\n;until the last run through returns an empty set.\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'penny) (penny-pincher (cdr ls))]\n      [else (cons (car ls)(penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (406,22,'genevieve',';; [Problem 8b]\n;b. This procedure adds the amount of change together. It does this by\n;taking the first word of the list, running it through the coins->cents procedure\n;described in part a, to get a number. This number is then added to the\n;other numbers by running the cdr of the list {all elements of the list but the first}\n;through a recursive statement (inventory-pockets).\n(define inventory-pockets\n  (lambda (ls)\n    (if (null? ls)\n        0\n        (+ (coin->cents (car ls)) (inventory-pockets (cdr ls))))))\n','', '');
INSERT INTO `Answers` VALUES (407,21,'genevieve',';; [Problem 8a]\n;8. a. This procedure is a simple cond procedure that determines if a \n;certain string is typed in, a predetermined value is returned. Else is zero.\n(define coin->cents\n  (lambda (coin)\n    (cond\n      [(equal? coin \'penny) 1]\n      [(equal? coin \'nickel) 5]\n      [(equal? coin \'dime) 10]\n      [(equal? coin \'quarter) 25]                                                 \n      [else 0])))\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (408,14,'genevieve',';; [Problem 1]\n\n;1 I defined the following lists using only numbers and con statements to list them together.\n(define ls1 (cons 1 (cons 2 \'())))\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n(define ls3 (cons \'(6) (cons \'(7) (cons \'(8) \'()))))\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n(define ls6 (cons 15 (cons (cons 16 (cons \'(17) \'())) \'())))\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n             \n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (409,16,'genevieve',';; [Problem 3]\n;3. The following procedure takes a list and displays the difference of the first\n;variable in front of the whole lists. It does this by taking the car of the list\n;which will display the first value and subtracting one from that. It then\n;uses cons to stick that new number in front of the old list (ls)\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (410,15,'genevieve',';; [Problem 2]\n;2. The following procedure lists the right and left numbers on the number line\n;of a variable x. It does this by listing the sum of x and 1 and cons-ing it with\n;an empty set and then cons-ing that whole statement with the difference between\n;x and 1.\n(define neighbors\n  (lambda (x)\n    (cons(- x 1) (cons (+ x 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (411,18,'genevieve',';; [Problem 5]\n;5. This procedure counts down from some number n to zero, displaying all\n;values until it gets to zero. At zero, it displays blast-off! It does this\n;by first making an if procedure to determine if n is zero. If it is,\n;the count-down procedure will display blast-off! If it is not, then the\n;rest of the procedure lists from n to 1 by cons-ing n and a recursive statement\n;of n-1. This will cause the procedure to keep looping through the procedure\n;until it gets to zero, listing all the values along the way.\n(define count-down\n  (lambda (n)\n    (if (zero? n)\n        \'(blastoff!)\n        (cons n (count-down (- n 1))))))\n  \n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (412,17,'genevieve',';; [Problem 4]\n;4. This procedure takes the first two values of the list and replaces them\n;with the product of the first number and two, summed with the second number.\n;It does this by using car to find the first value of the list, multiplying it\n;by two and then adding that new number to the first value of the cdr-ed list.\n;It does so by car-ing the cdr. Then it adds this new number nto the list\n;by cons-ing the new value and the cdr of the cdr of the list {the list\n;minus the first two numbers}. \n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (413,20,'genevieve',';; [Problem 7]\n;7. This procedure counts how many times the word \"bean\" appears in a list.\n;It does so by first checking to see if the list is null. If it is, 0 is returned.\n;Then it finds out if the first value in the list is equal to bean. If it is\n;Then 1 is added. It recursively goes through that, cdring the list each time\n;until the list is null. Else, it cdrs the list until it gets to a bean or null.\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? (car ls) \'bean) (+ (+ 0 1) (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (414,19,'genevieve',';; [Problem 6]\n;6 This procedure displays as many x\'s and o\'s as some number n indicates.\n;First, an if statement is made to check if n is zero. If it is, there is an\n;empty set. If it is not, then it will list x and o using cons and keeps recursively\n;going through that, subtracting 1 from the new number each time until it gets to zero.\n(define hugs-and-kisses\n  (lambda (n)\n    (if (zero? n)\n        \'()\n        (cons \'x (cons \'o (hugs-and-kisses (- n 1)))))))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (415,23,'genevieve',';; [Problem 9]\n;9. This procedure takes a list and adds another dare in front of dare.\n;First cond procedure is made to determine if the list is null. If it\n;is, an empty set is returned. If it is not then the first value of the list\n;is compared to the string dare to determine if they are equal. If they are,\n;dare is added twice to the cdr of the list, which goes through a recursive statement.\n;If it isn\'t, then the car of the list is listed with the recursion of the cdr\n;of the list to make sure the first value stays on the list.\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? (car ls) \'dare) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (416,24,'harrison',';; [Problem 10]\n; problem 10\n; removes all top level occurences of \'penny from a list\n\n(define penny-pincher\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'penny (car ls)) (penny-pincher (cdr ls))]\n      [else (cons (car ls) (penny-pincher (cdr ls)))])))\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (417,22,'harrison',';; [Problem 8b]\n; part b: inventory-pockets takes symbols representing change and returns\n; the number it represents\n\n(define inventory-pockets\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]\n      [(equal? (car ls) \'penny) (+ 1 (inventory-pockets (cdr ls)))]\n      [(equal? (car ls) \'nickel) (+ 5 (inventory-pockets (cdr ls)))]\n      [(equal? (car ls) \'dime) (+ 10 (inventory-pockets (cdr ls)))]\n      [(equal? (car ls) \'quarter) (+ 25 (inventory-pockets (cdr ls)))]\n      [else (inventory-pockets (cdr ls))])))\n\n','', '');
INSERT INTO `Answers` VALUES (418,21,'harrison',';; [Problem 8a]\n; problem 8\n; part a: coin->cents takes symbols and returns the change they represent\n\n(define coin->cents\n  (lambda (x)\n    (cond\n      [(equal? x \'penny) 1]\n      [(equal? x \'nickel) 5]\n      [(equal? x \'dime) 10]\n      [(equal? x \'quarter) 25]\n      [else 0])))\n\n\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (419,14,'harrison',';; [Problem 1]\n; problem 1 \n; use cons to make lists\n\n(define ls1 (cons 1 (cons 2 \'())))\n\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n\n(define ls3 (cons (cons 6 \'()) (cons (cons 7 \'()) (cons (cons 8 \'()) \'()))))\n\n(define ls4 (cons (cons 9 (cons 10 \'())) (cons 11 \'())))\n\n(define ls5 (cons 12 (cons (cons 13 (cons 14 \'())) \'())))\n\n(define ls6 (cons 15 (cons (cons 16 (cons (cons 17 \'()) \'())) \'())))\n\n(define ls7 (cons (cons (cons 18 \'()) (cons 19 \'())) (cons 20 \'())))\n\n(define ls8 (cons \'a (cons \'b (cons \'c (cons \'d (cons \'e (cons \'f \'())))))))\n\n(define ls9 (cons (cons (cons (cons \'g \'()) \'()) \'()) \'()))\n\n(define ls10 (cons (cons \'h (cons \'i \'())) (cons (cons \'j (cons \'k \'())) (cons (cons \'m (cons \'n \'())) \'()))))\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (420,16,'harrison',';; [Problem 3]\n; problem 3\n; takes a non-empty list and adds a number to it 1 less\n\n(define extend-sequence\n  (lambda (ls)\n    (cons (- (car ls) 1) ls)))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (421,15,'harrison',';; [Problem 2]\n; problem 2\n; takes a list containing an integer and returns the number 1 to the\n; left and 1 to the right\n\n(define neighbors\n  (lambda (ls)\n    (cons (- (car ls) 1) (cons (+ (car ls) 1) \'()))))\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (422,18,'harrison',';; [Problem 5]\n; problem 5\n; count-down takes n and countsdown in a list until it returns blastoff!\n\n(define count-down\n  (lambda (n)\n    (cond\n      [(zero? n) (cons \'blastoff! \'())]\n      [else (cons n (count-down (- n 1)))])))\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (423,17,'harrison',';; [Problem 4]\n; problem 4\n; scrunch-bits takes a number and doubles the first and adds the second\n\n(define scrunch-bits\n  (lambda (ls)\n    (cons (+ (* 2 (car ls)) (car (cdr ls))) (cdr (cdr ls)))))\n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (424,20,'harrison',';; [Problem 7]\n; problem 7\n; bean-counter checks to see the number of times \'bean  occurs in the top level\n\n(define bean-counter\n  (lambda (ls)\n    (cond\n      [(null? ls) 0]  \n      [(equal? \'bean (car ls)) (+ 1 (bean-counter (cdr ls)))]\n      [else (bean-counter (cdr ls))])))\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (425,19,'harrison',';; [Problem 6]\n; problem 6\n; hugs-and-kisses takes n and returns n x\'s and o\'s\n\n(define hugs-and-kisses\n  (lambda (n)\n    (cond\n      [(zero? n) \'()]\n      [(= n 1) (cons \'x (cons \'o \'()))]\n      [else (cons \'x (cons \'o (hugs-and-kisses (- n 1))))])))\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (426,23,'harrison',';; [Problem 9]\n; problem 9\n; double-dare takes a list and returns with all top level \'dare doubled\n\n(define double-dare\n  (lambda (ls)\n    (cond\n      [(null? ls) \'()]\n      [(equal? \'dare (car ls)) (cons \'dare (cons \'dare (double-dare (cdr ls))))]\n      [else (cons (car ls) (double-dare (cdr ls)))])))\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (427,24,'ingrid',';; [Problem 10]\n;;  10.      Define a procedure penny-pincher that takes a list ls and \n;;           returns the list with all top-level occurrences of the symbol\n;;           penny removed.\n\n;;         > (penny-pincher \'())\n;;         ()\n;;         > (penny-pincher \'(a penny earned is a penny saved))\n;;         (a earned is a saved)\n;;         > (penny-pincher \'(penny (penny) dime penny penny nickel))\n;;         ((penny) dime nickel)\n\n','Problem 10: pick-one-at-random -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (428,25,'ingrid',';; [Problem EC1]\n;;  11.       Extra Credit: Define a procedure next-curious that takes a\n;;            non-negative integer x and returns the next curious integer\n;;            larger than x. See a3 for an explanation of what makes an\n;;            integer curious.\n\n;;         > (next-curious 5)\n;;         48\n;;         > (next-curious 48)\n;;         1680\n;;         > (next-curious 100)\n;;         1680\n;;         > (next-curious 65000000)\n;;        65918160\n\n\n\n\n\n\n\n\n\n\n','Problem EC1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (429,22,'ingrid',';; [Problem 8b]\n;;            b.     Define a procedure inventory-pockets that takes a list\n;;                   of symbols representing the  contents of someone\'s\n;;                   pockets and returns the total value (in cents) of the\n;;                   coins found. Ignore any symbols that do not correspond\n;;                   to common U.S. coinage. Make use of your coin->cents\n;;                   procedure as a helper.\n\n;;(define inventory-pockets\n;;   (lambda (ls)  \n;;     (if (null? ls)\n;;         0\n;;         (+(inventory-pockets ls)(+ (coin->cents (car (cdr ls))))) \n;;         (inventory-pockets ls))))\n  \n  \n  \n;;               > (inventory-pockets \'())\n;;               0\n;;               > (inventory-pockets \'(penny))\n;;               1\n;;               > (inventory-pockets \'(nickel penny))\n;;               6\n;;               > (inventory-pockets \'(dime nickel penny))\n;;               16\n;;               > (inventory-pockets \'(quarter dime nickel penny))\n;;               41\n;;               > (inventory-pockets \'(lint toad pen-knife))\n;;               0\n;;;              > (inventory-pockets\n;;                   \'(penny quarter ticket-stub dime receipt quarter gum-wrapper\n;;                      nickel penny string))\n;;               67\n\n','', '');
INSERT INTO `Answers` VALUES (430,21,'ingrid',';; [Problem 8a]\n;;   8.      In this problem, you will first define a non-recursive helper\n;;           procedure and then use the helper to define a recursive\n;;           procedure.\n\n;;            a.    Define a procedure coin->cents that takes a symbol\n;;                  representing a common U.S. coin (i.e., either penny,\n;;                  nickel, dime, or quarter) and returns the corresponding\n;;                  value of the coin in cents, as shown below.\n\n(define coin->cents\n  (lambda (x)\n    (cond\n      [(equal? x \'penny) 1]\n      [(equal? x \'nickel) 5]\n      [(equal? x \'dime) 10]\n      [(equal? x \'quarter) 25]\n      [(equal? x \'slug) 0])))\n\n\n','Problem 8: dna-complement -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (431,14,'ingrid',';; [Problem 1]\n;;   1.      Using only cons, numbers, and the empty list, build each of the\n;;            following lists, binding the result to the indicated identifier.\n;;            For example, the variable ls1 is created with (define ls1 \n;;            (cons 1 (cons 2 \'()))). Build everything from scratch in a single expression. You may not use any variables or any quoted lists, other than the empty list. Be sure to evaluate your expressions in the repl to make sure that you have constructed the lists properly.\n        \n\n(define ls1 (cons 1 (cons 2 \'())))\n\n(define ls2 (cons 3 (cons 4 (cons 5 \'()))))\n\n\n(define ls3(cons \'(6) \'((7)(8))))\n\n        \n(define ls4(cons \'(9 10) \'(11)))\n\n(define ls5(cons  \'12 \'((13 14))))\n\n(define ls6(cons \'15 \'((16(17)))))\n\n(define ls7(cons \'((18) 19) \'(20)))\n\n(define ls8(cons \'a \'(b c d e f)))\n	 \n(define ls9(cons \'(((g))) \'()))\n\n(define ls10(cons \'(h i)(cons \'(j k)(cons \'(m n) \'()))))\n\n','Problem 1: least    -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (432,16,'ingrid',';; [Problem 3]\n;;  3.      Define a procedure extend-sequence that takes a non-empty list\n;;          beginning with a number and returns the list with one additional\n;;          number at the front. The new number is one less than the number at\n;;          the front of the given list.\n\n       (define extend-sequence\n	(lambda (ls)\n            (cons (- (car ls) 1) (cons (car ls) (cdr ls)))))\n\n','Problem 3: curious?  -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (433,15,'ingrid',';; [Problem 2]\n;;   2.      Define a procedure neighbors that takes an integer, x, and returns a list containing the integer to its left and the integer to its right on the number line.\n\n       \n\n   (define neighbors\n		(lambda (x)\n		  (cons (- x 1)(cons (+ x 1) \'()))))\n\n\n\n\n','Problem 2: next-even -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (434,18,'ingrid',';; [Problem 5]\n;;   5.      Define a procedure count-down that takes a positive integer n and\n;;         returns a list of the integers from n down to 1, followed by the\n;;         symbol blastoff!.\n\n   \n\n(define count-down \n  (lambda (n)\n   (cond\n     [(zero? n) \'(Blastoff)]\n     [else\n       (cons n (count-down (- n 1)))])))\n         \n\n\n\n','Problem 5: opposite  -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (435,17,'ingrid',';; [Problem 4]\n;;   4.      Define a procedure scrunch-bits that takes a list of two or more numbers\n;;           and returns the list with the first two numbers replaced by the result\n;;           of doubling the first number and adding the second.\n\n        \n       (define scrunch-bits\n	  (lambda (ls)\n           (cons(+ (* (car ls) 2) (car (cdr ls)))(cdr (cdr ls) ))))\n \n\n','Problem 4: sleep-in? -->   correct: 1/1\n', '');
INSERT INTO `Answers` VALUES (436,20,'ingrid',';; [Problem 7]\n;;   7.      Define a procedure bean-counter that takes a list ls and \n;;           returns the number of times the symbol bean occurs at top \n;;           level, meaning that you need not worry about examining the\n;;           elements inside nested sublists.\n\n(define bean-counter\n  (lambda  (ls)\n     (if  (null? ls)\n         0\n        (if (equal? (car ls) \'bean)\n            (+ 1 (bean-counter (cdr ls)))\n         (bean-counter (cdr ls))))))\n         \n\n\n','Problem 7: next-collatz -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (437,19,'ingrid',';; [Problem 6]\n;;   6.     Define a procedure hugs-and-kisses that takes a nonnegative\n;;          integer n and returns a list of n x\'s and o\'s.\n\n\n(define hugs-and-kisses\n  (lambda (n)   \n    (cond\n     [(zero? n) \'()]\n      [else\n        (cons  \'x (cons \'o (hugs-and-kisses (- n 1))))])))\n\n\n\n','Problem 6: next-compass -->   correct:  1/1\n', '');
INSERT INTO `Answers` VALUES (438,23,'ingrid',';; [Problem 9]\n;;   9.     Define a procedure double-dare that takes a list ls and returns\n;;          the list with all top-level occurrences of the symbol dare\n;;            doubled.\n;;(define double-dare\n;;  (lambda ()\n;;    (cond\n;;      [(\n\n\n\n\n\n\n\n\n\n\n\n\n;;         > (double-dare \'())\n;;         ()\n;;         > (double-dare \'(dare to try))\n;;         (dare dare to try)\n;;         > (double-dare \'(truth or dare or triple dog dare))\n;;         (truth or dare dare or triple dog dare dare)\n;;         > (double-dare \'(dare dare dare))\n;;         (dare dare dare dare dare dare)\n\n','Problem 9: up-or-down -->   correct: 1/1\n', '');
/*!40000 ALTER TABLE `Answers` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Assignment`
--

DROP TABLE IF EXISTS `Assignment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Assignment` (
  `s_no` int(4) NOT NULL auto_increment,
  `name` varchar(20) default NULL,
  `term` varchar(20) default NULL,
  `status` varchar(10) default NULL,
  PRIMARY KEY  (`s_no`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Assignment`
--

LOCK TABLES `Assignment` WRITE;
/*!40000 ALTER TABLE `Assignment` DISABLE KEYS */;
INSERT INTO `Assignment` VALUES (1,'a1','Spring 2010','Graded');
INSERT INTO `Assignment` VALUES (2,'a2','Spring 2010','Graded');
INSERT INTO `Assignment` VALUES (3,'a3','Spring 2010','Graded');
INSERT INTO `Assignment` VALUES (4,'a4','Spring 2010','Not Graded');
/*!40000 ALTER TABLE `Assignment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Associated_with`
--

DROP TABLE IF EXISTS `Associated_with`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Associated_with` (
  `q_no` int(4) NOT NULL,
  `s_no` int(4) NOT NULL,
  `collected_date` date default NULL,
  PRIMARY KEY  (`q_no`,`s_no`),
  KEY `s_no` (`s_no`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Associated_with`
--

LOCK TABLES `Associated_with` WRITE;
/*!40000 ALTER TABLE `Associated_with` DISABLE KEYS */;
INSERT INTO `Associated_with` VALUES (1,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (2,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (3,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (4,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (5,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (6,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (7,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (8,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (9,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (10,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (11,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (12,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (13,3,'0000-00-00');
INSERT INTO `Associated_with` VALUES (14,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (15,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (16,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (17,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (18,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (19,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (20,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (21,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (22,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (23,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (24,4,'0000-00-00');
INSERT INTO `Associated_with` VALUES (25,4,'0000-00-00');
/*!40000 ALTER TABLE `Associated_with` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Comment`
--

DROP TABLE IF EXISTS `Comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Comment` (
  `c_no` int(4) NOT NULL auto_increment,
  `content` text,
  PRIMARY KEY  (`c_no`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Comment`
--

LOCK TABLES `Comment` WRITE;
/*!40000 ALTER TABLE `Comment` DISABLE KEYS */;
/*!40000 ALTER TABLE `Comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Distributed`
--

DROP TABLE IF EXISTS `Distributed`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Distributed` (
  `q_no` int(4) NOT NULL default '0',
  `instructor_id` varchar(20) NOT NULL default '',
  `TA_id` varchar(20) NOT NULL default '',
  PRIMARY KEY  (`q_no`,`instructor_id`,`TA_id`),
  KEY `instructor_id` (`instructor_id`),
  KEY `TA_id` (`TA_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Distributed`
--

LOCK TABLES `Distributed` WRITE;
/*!40000 ALTER TABLE `Distributed` DISABLE KEYS */;
/*!40000 ALTER TABLE `Distributed` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Grade`
--

DROP TABLE IF EXISTS `Grade`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Grade` (
  `TA_id` varchar(20) NOT NULL,
  `s_no` int(4) NOT NULL default '0',
  `student_id` varchar(20) NOT NULL default '',
  `finalGrade` varchar(4) default NULL,
  PRIMARY KEY  (`s_no`,`student_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Grade`
--

LOCK TABLES `Grade` WRITE;
/*!40000 ALTER TABLE `Grade` DISABLE KEYS */;
INSERT INTO `Grade` VALUES ('dikim',1,'ravindrv','A');
INSERT INTO `Grade` VALUES ('dikim',1,'student1','A');
INSERT INTO `Grade` VALUES ('dikim',1,'student2','B');
INSERT INTO `Grade` VALUES ('dikim',1,'student3','C');
INSERT INTO `Grade` VALUES ('dikim',1,'student4','A');
INSERT INTO `Grade` VALUES ('alexr',1,'student5','B');
INSERT INTO `Grade` VALUES ('alexr',1,'student6','B');
INSERT INTO `Grade` VALUES ('alexr',1,'student7','B');
INSERT INTO `Grade` VALUES ('alexr',1,'student8','A');
INSERT INTO `Grade` VALUES ('alexr',1,'student9','B');
INSERT INTO `Grade` VALUES ('dikim',2,'ravindrv','A');
INSERT INTO `Grade` VALUES ('dikim',2,'student1','A');
INSERT INTO `Grade` VALUES ('dikim',2,'student2','B');
INSERT INTO `Grade` VALUES ('dikim',2,'student3','C');
INSERT INTO `Grade` VALUES ('dikim',2,'student4','A');
INSERT INTO `Grade` VALUES ('alexr',2,'student5','B');
INSERT INTO `Grade` VALUES ('alexr',2,'student6','B');
INSERT INTO `Grade` VALUES ('alexr',2,'student7','B');
INSERT INTO `Grade` VALUES ('alexr',2,'student8','A');
INSERT INTO `Grade` VALUES ('alexr',2,'student9','B');
INSERT INTO `Grade` VALUES ('dikim',3,'ravindrv','A');
INSERT INTO `Grade` VALUES ('dikim',3,'student1','A');
INSERT INTO `Grade` VALUES ('dikim',3,'student2','B');
INSERT INTO `Grade` VALUES ('dikim',3,'student3','C');
INSERT INTO `Grade` VALUES ('dikim',3,'student4','A');
/*!40000 ALTER TABLE `Grade` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Groups`
--

DROP TABLE IF EXISTS `Groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Groups` (
  `g_no` int(4) NOT NULL auto_increment,
  `name` char(10) NOT NULL default '',
  `instructor_id` varchar(20) NOT NULL default '',
  PRIMARY KEY  (`g_no`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Groups`
--

LOCK TABLES `Groups` WRITE;
/*!40000 ALTER TABLE `Groups` DISABLE KEYS */;
/*!40000 ALTER TABLE `Groups` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Instructor`
--

DROP TABLE IF EXISTS `Instructor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Instructor` (
  `user_id` varchar(20) NOT NULL default '',
  `term` varchar(20) NOT NULL,
  `status` varchar(12) NOT NULL default 'not started',
  PRIMARY KEY  (`user_id`,`term`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Instructor`
--

LOCK TABLES `Instructor` WRITE;
/*!40000 ALTER TABLE `Instructor` DISABLE KEYS */;
/*!40000 ALTER TABLE `Instructor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Questions`
--

DROP TABLE IF EXISTS `Questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Questions` (
  `q_no` int(4) NOT NULL auto_increment,
  `name` varchar(10) NOT NULL,
  `create_date` date default NULL,
  `is_archived` tinyint(1) default NULL,
  PRIMARY KEY  (`q_no`)
) ENGINE=MyISAM AUTO_INCREMENT=26 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Questions`
--

LOCK TABLES `Questions` WRITE;
/*!40000 ALTER TABLE `Questions` DISABLE KEYS */;
INSERT INTO `Questions` VALUES (1,'1a','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (2,'1b','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (3,'2','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (4,'3','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (5,'4','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (6,'5','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (7,'6','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (8,'7','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (9,'8','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (10,'9','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (11,'10','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (12,'11','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (13,'12','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (14,'1','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (15,'2','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (16,'3','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (17,'4','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (18,'5','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (19,'6','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (20,'7','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (21,'8a','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (22,'8b','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (23,'9','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (24,'10','2010-11-29',NULL);
INSERT INTO `Questions` VALUES (25,'EC1','2010-11-29',NULL);
/*!40000 ALTER TABLE `Questions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Related_q`
--

DROP TABLE IF EXISTS `Related_q`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Related_q` (
  `q_no` int(4) NOT NULL,
  `group_name` varchar(10) NOT NULL,
  `instructor_id` varchar(20) NOT NULL default '',
  PRIMARY KEY  (`q_no`,`group_name`,`instructor_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Related_q`
--

LOCK TABLES `Related_q` WRITE;
/*!40000 ALTER TABLE `Related_q` DISABLE KEYS */;
/*!40000 ALTER TABLE `Related_q` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Score_and_comment`
--

DROP TABLE IF EXISTS `Score_and_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Score_and_comment` (
  `a_no` int(4) NOT NULL default '0',
  `TA_id` varchar(20) NOT NULL default '',
  `c_no` int(4) default NULL,
  `score` varchar(4) default NULL,
  PRIMARY KEY  (`a_no`,`TA_id`),
  KEY `TA_id` (`TA_id`),
  KEY `c_no` (`c_no`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Score_and_comment`
--

LOCK TABLES `Score_and_comment` WRITE;
/*!40000 ALTER TABLE `Score_and_comment` DISABLE KEYS */;
INSERT INTO `Score_and_comment` VALUES (243,'alexr','1','A');
INSERT INTO `Score_and_comment` VALUES (244,'alexr','1','B');
INSERT INTO `Score_and_comment` VALUES (245,'alexr','1','B');
INSERT INTO `Score_and_comment` VALUES (246,'alexr','1','A');
INSERT INTO `Score_and_comment` VALUES (247,'alexr','1','C');
/*!40000 ALTER TABLE `Score_and_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `Student`
--

DROP TABLE IF EXISTS `Student`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Student` (
  `user_id` varchar(20) NOT NULL default '',
  `dept` varchar(20) NOT NULL,
  `year` varchar(10) NOT NULL,
  `term` varchar(20) NOT NULL,
  PRIMARY KEY  (`user_id`,`term`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Student`
--

LOCK TABLES `Student` WRITE;
/*!40000 ALTER TABLE `Student` DISABLE KEYS */;
INSERT INTO `Student` VALUES ('sbaldwa','Computer Science','Senior','Spring 2010');
INSERT INTO `Student` VALUES ('ravindrv','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('albert','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('boris','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('cathy','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('daniel','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('ellen','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('francis','Informatics','Junior','Spring 2010');
INSERT INTO `Student` VALUES ('garry','Informatics','Senior','Spring 2010');
INSERT INTO `Student` VALUES ('heidi','Informatics','Senior','Spring 2010');
INSERT INTO `Student` VALUES ('alice','Informatics','Senior','Spring 2010');
INSERT INTO `Student` VALUES ('bob','Computer Science','Freshman','Spring 2010');
INSERT INTO `Student` VALUES ('charles','Computer Science','Freshman','Spring 2010');
INSERT INTO `Student` VALUES ('debbie','Computer Science','Freshman','Spring 2010');
INSERT INTO `Student` VALUES ('fergiee','Computer Science','Freshman','Spring 2010');
INSERT INTO `Student` VALUES ('ingrid','Computer Science','Sophomore','Spring 2010');
INSERT INTO `Student` VALUES ('elvis','Computer Science','Sophomore','Spring 2010');
/*!40000 ALTER TABLE `Student` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `TA`
--

DROP TABLE IF EXISTS `TA`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `TA` (
  `user_id` varchar(20) NOT NULL default '',
  `term` varchar(20) NOT NULL,
  PRIMARY KEY  (`user_id`,`term`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `TA`
--

LOCK TABLES `TA` WRITE;
/*!40000 ALTER TABLE `TA` DISABLE KEYS */;
INSERT INTO `TA` VALUES ('alexr','Spring 2010');
INSERT INTO `TA` VALUES ('dikim','Spring 2010');
INSERT INTO `TA` VALUES ('yuangao','Spring 2010');
/*!40000 ALTER TABLE `TA` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `User`
--

DROP TABLE IF EXISTS `User`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `User` (
  `user_id` varchar(20) NOT NULL default '',
  `user_password` varchar(20) NOT NULL,
  `user_email` varchar(20) NOT NULL,
  `user_name` varchar(50) NOT NULL,
  `role` varchar(10) NOT NULL default '',
  PRIMARY KEY  (`user_id`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `User`
--

LOCK TABLES `User` WRITE;
/*!40000 ALTER TABLE `User` DISABLE KEYS */;
INSERT INTO `User` VALUES ('menzel','111','menzel@indiana.edu','Suzanne Menzel','admin');
INSERT INTO `User` VALUES ('alexr','111','alexr@indiana.edu','Alex Rudnick','ta');
INSERT INTO `User` VALUES ('dikim','111','dikim@indiana.edu','DongInn Kim','ta');
INSERT INTO `User` VALUES ('yuangao','111','yuangao@indiana.edu','Yuan Gao','final');
INSERT INTO `User` VALUES ('sbaldwa','111','sbaldwa@indiana.edu','Swetha Baldwa','student');
INSERT INTO `User` VALUES ('ravindrv','111','ravindrv@indiana.edu','Vignesh Ravindran','student');
INSERT INTO `User` VALUES ('albert','111','albert@indiana.edu','Albert Kim','student');
INSERT INTO `User` VALUES ('boris','111','boris@indiana.edu','Boris Kim','student');
INSERT INTO `User` VALUES ('cathy','111','cathy@indiana.edu','Cathy Kim','student');
INSERT INTO `User` VALUES ('daniel','111','daniel@indiana.edu','Daniel Kim','student');
INSERT INTO `User` VALUES ('ellen','111','ellen@indiana.edu','Ellen Kim','student');
INSERT INTO `User` VALUES ('francis','111','francis@indiana.edu','Fancies Kim','student');
INSERT INTO `User` VALUES ('garry','111','garry@indiana.edu','Garry Kim','student');
INSERT INTO `User` VALUES ('heidi','111','imre@indiana.edu','Heidi Kim','student');
INSERT INTO `User` VALUES ('alice','111','alice@indiana.edu','Allice Kim','student');
INSERT INTO `User` VALUES ('bob','111','bob@indiana.edu','Bob Kim','student');
INSERT INTO `User` VALUES ('charles','111','charles@indiana.edu','Charles Kim','student');
INSERT INTO `User` VALUES ('debbie','111','debbie@indiana.edu','Debbie Kim','student');
INSERT INTO `User` VALUES ('fergiee','111','fergie@indiana.edu','Fergie Kim','student');
INSERT INTO `User` VALUES ('ingrid','111','ingrid@indiana.edu','Ingrid Kim','student');
INSERT INTO `User` VALUES ('elvis','111','elvis@indiana.edu','Elvis Kim','student');
/*!40000 ALTER TABLE `User` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2010-11-28 20:37:36
