(define clean-environment (lambda args (void)))

(define $set-random-sequence$ #f)

(let ((seq '()))
  
  (set! $set-random-sequence$
    (lambda (ls)
      (set! seq ls)))

  (set! random
    (lambda (n)
      (#%random n)
      (if (null? seq)
	  (#%random n)
	  (let ((rand-num (remainder (car seq) n)))
	    (set! seq (cdr seq))	
	    rand-num))))	

)

(define eventually?
  (lambda (thunk possible)
    (let loop ([left possible])
      (if (null? left)
          #t
          (let ([ans (thunk)])
            (if (member ans possible)
                (loop (remove ans left))
                #f))))))        


